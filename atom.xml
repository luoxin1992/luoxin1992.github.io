<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuoXin&#39;s World</title>
  <subtitle>有梦为马 随处可栖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lx1992.com.cn/"/>
  <updated>2017-03-07T13:25:47.174Z</updated>
  <id>http://www.lx1992.com.cn/</id>
  
  <author>
    <name>LuoXin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年校园招聘行程小记</title>
    <link href="http://www.lx1992.com.cn/2017/03/07/2018-campus-recruiting/"/>
    <id>http://www.lx1992.com.cn/2017/03/07/2018-campus-recruiting/</id>
    <published>2017-03-07T13:25:47.174Z</published>
    <updated>2017-03-07T13:25:47.174Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<table>
<thead>
<tr>
<th>发布时间</th>
<th>公司</th>
<th>事业群/部门</th>
<th>工作城市</th>
<th>起止时间</th>
<th>网申地址/投递邮箱</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017.02.15</td>
<td>华为</td>
<td></td>
<td>深圳/杭州</td>
<td></td>
<td><a href="http://career.huawei.com/recruitment/" target="_blank" rel="external">http://career.huawei.com/recruitment/</a></td>
<td>杭厦</td>
</tr>
<tr>
<td>2017.02.25</td>
<td>京东</td>
<td></td>
<td>北京/上海/成都/南京</td>
<td>2.24~4.4</td>
<td><a href="http://campus.jd.com/" target="_blank" rel="external">http://campus.jd.com/</a></td>
<td>2017实习生招聘</td>
</tr>
<tr>
<td></td>
<td>腾讯</td>
<td></td>
<td></td>
<td>2.23~3.28</td>
<td><a href="http://join.qq.com/techrecommend.php" target="_blank" rel="external">http://join.qq.com/techrecommend.php</a></td>
<td>暑期实习生技术岗内推</td>
</tr>
<tr>
<td>2017.02.24</td>
<td>吉比特</td>
<td></td>
<td>厦门/深圳</td>
<td></td>
<td><a href="http://join.g-bits.com/" target="_blank" rel="external">http://join.g-bits.com/</a></td>
<td></td>
</tr>
<tr>
<td>2017.02.27</td>
<td>360</td>
<td></td>
<td></td>
<td>2.17~3.22</td>
<td><a href="http://campus.chinahr.com/2017/360/" target="_blank" rel="external">http://campus.chinahr.com/2017/360/</a></td>
<td></td>
</tr>
<tr>
<td>2017.02.27</td>
<td>招商银行信用卡中心</td>
<td></td>
<td></td>
<td>2.27~4.4</td>
<td><a href="http://cmbcc.zhiye.com/" target="_blank" rel="external">http://cmbcc.zhiye.com/</a></td>
<td></td>
</tr>
<tr>
<td>2017.03.01</td>
<td>阿里巴巴</td>
<td></td>
<td></td>
<td>3.1~4.21</td>
<td><a href="https://campus.alibaba.com/index.htm" target="_blank" rel="external">https://campus.alibaba.com/index.htm</a></td>
<td>2017实习生</td>
</tr>
<tr>
<td>2017.03.01</td>
<td>美团点评</td>
<td></td>
<td>北京/上海</td>
<td></td>
<td><a href="http://campus.meituan.com/" target="_blank" rel="external">http://campus.meituan.com/</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td>美团点评</td>
<td>酒店旅游事业群</td>
<td>北京/上海</td>
<td></td>
<td>hr.hb.neitui#meituan.com</td>
<td></td>
</tr>
<tr>
<td></td>
<td>唯品会</td>
<td></td>
<td>上海</td>
<td></td>
<td><a href="https://mxy.liepin.com/job/showxyejobdetail/?job_id=307682&amp;show_type=1" target="_blank" rel="external">https://mxy.liepin.com/job/showxyejobdetail/?job_id=307682&amp;show_type=1</a></td>
<td></td>
</tr>
<tr>
<td>2017.03.02</td>
<td>蚂蚁金服</td>
<td>财富事业部</td>
<td>杭州/上海</td>
<td></td>
<td>faqi.yfq#alibaba-inc.com</td>
<td>通信94级校友内推</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发布时间&lt;/th&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;事业群/部门&lt;/th&gt;
&lt;th&gt;工作城市&lt;/th&gt;
&lt;th&gt;起止时间&lt;/th&gt;
&lt;th&gt;网申地址/投递邮箱&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;

    
    </summary>
    
      <category term="2018校招" scheme="http://www.lx1992.com.cn/categories/2018%E6%A0%A1%E6%8B%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>2018校招之蚂蚁金服</title>
    <link href="http://www.lx1992.com.cn/2017/03/07/2018-campus-recruiting-antgroup/"/>
    <id>http://www.lx1992.com.cn/2017/03/07/2018-campus-recruiting-antgroup/</id>
    <published>2017-03-07T13:25:09.000Z</published>
    <updated>2017-03-07T14:46:59.486Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Last Update：2016/03/07 一面主观问答</strong></p>
<p>第一场，AntGroup。话说阿里的效率还是杠杠的，不知道未来其他公司会怎样。</p>
<p>上周六一位94级的学长到我校来了场直接的内推，而我却是提前一天才接到的通知，再加上之前大部分的经历都放在老板的项目上，甚至都没怎么打算这学期再出去实习（新美大的半年多时光看上去还能撑一撑[坏笑]）。</p>
<a id="more"></a>
<p>但既然有这机会为何不试试呢？于是乎连夜修改了简历，次日给学长发了过去。隔了一个周末，周一中午接到电话，电话那头表明简历已收到，2、3个小时后便收到了内推邮件，初略看了下要填写意向岗位和工作地点</p>
<blockquote>
<p>学长说，阿里，和蚂蚁金服HR系统打通，机会总共就一次，挂了就……除非“特殊情况”</p>
</blockquote>
<p>所以一开始还是挺纠结的，把唯一的机会这么仓促地用掉吗？毕竟基本上没有做任何准备。但对照了下周围同学的行动，还是决定拼一把——确认了内推邮件，再到校招官网上完善简历、素质测评啥的，也是大多数公司都要走的流程，这时候大概是周二的17时。</p>
<p>有点出乎意料地，仅仅1小时之后，18时整我就接到了一面电话，那时我还在从食堂回图书馆路上，匆匆找了个安静的地方，开始了35分钟20秒的第一次电面。</p>
<h4 id="Part0"><a href="#Part0" class="headerlink" title="Part0"></a>Part0</h4><p>确认了接受面试，面试官首先介绍他们自己的情况——蚂蚁金服财富技术部，招聘2018年毕业的学生来实习，暂时只有Java开发岗，工作地点杭州/上海。</p>
<h4 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h4><p>接下来一大半时间都由我自述过去的经历。</p>
<p>很显然，目前对我影响最大的Java项目是在新美大实习期间参与开发的《叮当管家》后端。简单聊了下实习的收获，个人觉得对于这样规模的项目，对儿而言，初期，业务将会取代技术称为比较大的绊脚石，也确实回想起当初的“订单时间优化”这么个需求，单是弄懂新的逻辑和旧的逻辑就花了好些时间。</p>
<blockquote>
<p>既然弄懂业务逻辑要花不少时间，你是怎么提高效率的？和PM沟通多吗？</p>
</blockquote>
<p>更多的还是请教身边的同事吧，当然跟PM交流的不会少，不先弄懂需求怎么行呢？不过面试官对那个项目两个PM一个负责Web端一个负责App端很不理解，认为一个负责FE一个负责BE会更合理。<strong>另外好奇一下，一般RD和运营交互多吗？我对运营没什么印象呢？</strong></p>
<p>其次是开发流程啥的，毕竟在学校的项目，不要说什么规范的流程了，多少项目开发完就不了了之，但公司的项目就不一样了，从PM出需求到最终上线有严格的规范</p>
<blockquote>
<p>你接到一个需求以后，你需要做什么？详述一下，到QA提测前你的工作？</p>
</blockquote>
<p>接到需求后，首先我会分解这个需求，这个过程就需要和PM多沟通，分解之后得出这个需求对项目有怎样的影响，将从哪几个点切入，开发估时多久；而后会和FE同学定接口，毕竟前后端完全分离了嘛，然后就可以写设计文档了——这就是第一阶段的输出了。</p>
<blockquote>
<p>设计文档包括哪些内容？</p>
</blockquote>
<p>一是涉及的功能点改动(及其流程)，二是库表结构(如果涉及的话)，三是接口定义。对其中的业务流程，可能跟项目的规模和需求有关系的，很多情况下我甚至用文字就能描述清楚，少数情况下会画画流程图，至于时序图那是用的少之又少了。<strong>项目中较少出现跨系统的调用，一个逻辑总能够“很轻松”的描述清楚，这一点面试也比较奇怪</strong></p>
<blockquote>
<p>如果有BUG在提测时没发现，上线后报错了，这种情况遇到过吗，怎么发现和处理的？</p>
</blockquote>
<p>一开始我的回答是看日志，因为确实上线后的一段时间我们RD基本都会紧盯着日志(大屏除了码代码这可能是第二个用处……)，但着实又让面试官吃了一惊，毕竟这项目的规模还是有一定差距的嘛。一段时间以后基本上就依靠监控系统了，实话说，每次收到报警短信都神经过敏，尤其是线上来个NPE啥的……</p>
<blockquote>
<p>监控系统只能监测抛出异常的情况，万一程序运行正确但结果不对，制造了线上脏数据呢？</p>
</blockquote>
<p>这个问题处理起来我就没什么经验，实话实说了。有点印象的几个思路：1、需求上线后QA会在线上回归一圈；2、每日报表要是有什么异常数据PM肯定大发雷霆；3、被客诉了[哭晕]……万一碰上这样的问题，修线上数据那也是够够的。最后还是面试官给了一点提示：没有系统间的数据核对机制吗？</p>
<p>还有就是基础组件跟服务化思想，过去总是不是网上找点开源组件，就是自己重复造轮子，到了公司才意识到人家有那么多基础组件和设施等着我们去用。至于服务化，就是在实习尾声的时候多少参与了一点这个项目的重构，对微服务可能有了那么一丢丢认识。</p>
<p>这第一部分，面试官对我的评价是对整个项目流程还是基本掌握的不错的。</p>
<h4 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//TODO 面试题，其实这才是最大头的</div></pre></td></tr></table></figure>
<h4 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h4><p>好，目前这就是全部了。虽然我知道以我自己的能力，希望有多大，但毕竟这是第一次正式找工作(之前新美大因为毕业时间的关系不满足留用条件，它的两轮现场面最后也只整理出了几个点[可惜])，所以记下来也权当个纪念，也许，后面的面试就不会再记得这么详细了。</p>
<p>噢，写完这篇这会我都还没笔试呢……(这流程是不是有点怪怪的)，笔试的情况也会更新在这里~当然前提是我做出来了[坏笑]。还有前面面试的几个问题我目前整理的答案并不完整，甚至可能是错的，欢迎一起完善哈~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Last Update：2016/03/07 一面主观问答&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一场，AntGroup。话说阿里的效率还是杠杠的，不知道未来其他公司会怎样。&lt;/p&gt;
&lt;p&gt;上周六一位94级的学长到我校来了场直接的内推，而我却是提前一天才接到的通知，再加上之前大部分的经历都放在老板的项目上，甚至都没怎么打算这学期再出去实习（新美大的半年多时光看上去还能撑一撑[坏笑]）。&lt;/p&gt;
    
    </summary>
    
      <category term="2018校招" scheme="http://www.lx1992.com.cn/categories/2018%E6%A0%A1%E6%8B%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8学习之新的日期和时间API</title>
    <link href="http://www.lx1992.com.cn/2017/02/16/java8-the-new-date-and-time-api/"/>
    <id>http://www.lx1992.com.cn/2017/02/16/java8-the-new-date-and-time-api/</id>
    <published>2017-02-16T10:50:52.000Z</published>
    <updated>2017-02-20T09:26:12.343Z</updated>
    
    <content type="html"><![CDATA[<p>过去，在Java中处理日期和时间时，无外乎这两个类(以及它们的子类)</p>
<ul>
<li>java.util.Date</li>
<li>java.util.Calendar</li>
</ul>
<p>但它们固有一些缺陷，到了Java8，我们有了更多更好的选择，包括又不限于</p>
<ul>
<li>java.time.Instant</li>
<li>java.time.Duration</li>
<li>java.time.format.DateTimeFormatter</li>
</ul>
<a id="more"></a>
<h4 id="绝对时间"><a href="#绝对时间" class="headerlink" title="绝对时间"></a>绝对时间</h4><p>如果我们把时间看做一道长河（时间轴），那么其上的每一个<em>点</em>，就是一个<em>瞬间</em>(Instant)，用java.time.Instant类的对象表示。Instant类可以表示的时间范围非常之广，从-1000000000-01-01 00:00:00到+1000000000-12-31 23:59:59.999999999，和先前的java.util.Date类似，仍然取1970-01-01 00:00:00作为时间的纪元，这3个特殊的时间点，可以通过Instant.MIN，Instant.MAX和Instant.EPOCH加以验证。若要取得当前的瞬时值，可以使用<em>now</em>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获得Instant可以表示的最小、最大时间点</span></div><div class="line">Instant min = Instant.MIN;</div><div class="line">Instant max = Instant.MAX;</div><div class="line">System.out.println(min);</div><div class="line">System.out.println(max);</div><div class="line"><span class="comment">//获取Instant时间纪元和当前时间点</span></div><div class="line">Instant epoch = Instant.EPOCH;</div><div class="line">Instant now = Instant.now();</div><div class="line">System.out.println(epoch);</div><div class="line">System.out.println(now);</div></pre></td></tr></table></figure></p>
<p>两个Instant之间的距离，被称为<em>持续时间</em>(Duration)，要计算Duration，使用<em>between</em>方法，然后再通过<em>toNanos|Seconds|Days</em>等方法得到这段时间对应的，从纳秒到天，不同精度的表示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//计算两个Instant之间的Duration</span></div><div class="line">Duration duration = Duration.between(epoch, now);</div><div class="line">System.out.println(duration);</div><div class="line">System.out.println(duration.toMillis());</div><div class="line">System.out.println(duration.toDays());</div></pre></td></tr></table></figure></p>
<p>无论是Instant对象还是Duration对象，它们都是不可变的，底层分实际上由一个long型和一个int型整数组成，前者表示这个时间点距离时间纪元的<em>秒</em>数，后者表示一个最多可以精确到纳秒的调整值，注意这里已经不再是距离时间纪元的<em>毫秒</em>数了。</p>
<p>此外，二者均提供了诸多数学操作，即包括了做四则运算的<em>plus|minus[Nanos|Seconds|Days]</em>、<em>multiplied|dividedBy</em>，也有类似<em>abs</em>、<em>isZero|Negative</em>这样的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对Instant和Duration进行数学操作</span></div><div class="line">Instant nowPlusDays = now.plus(<span class="number">1</span>, ChronoUnit.DAYS);</div><div class="line">System.out.println(nowPlusDays);</div><div class="line">Instant nowMinusSeconds = now.minusSeconds(<span class="number">86400</span>);</div><div class="line">System.out.println(nowMinusSeconds);</div><div class="line">Duration durationMultiplyFactor = duration.multipliedBy(<span class="number">3</span>);</div><div class="line">System.out.println(durationMultiplyFactor.toMillis());</div><div class="line">Duration durationDivideFactor = duration.dividedBy(<span class="number">2</span>);</div><div class="line">System.out.println(durationDivideFactor.toMillis());</div><div class="line">System.out.println(duration.isNegative());</div></pre></td></tr></table></figure></p>
<h4 id="本地日期-时间"><a href="#本地日期-时间" class="headerlink" title="本地日期/时间"></a>本地日期/时间</h4><p>Java8提供了LocalDate、LocalTime、LocalDateTime这么3个类来表示本地日期/时间。用这3个类所表示的时间，是无法对应在Instant上的，主要原因是它缺少了时区等信息，也就无法准确地与一个瞬时点对应起来。</p>
<p>可以使用<em>now</em>、<em>of</em>方法构造LocalDate、LocalTime、LocalDateTime对象，先前Date类的几个奇怪设计：月份取值0-11、年份是目标年份与1900之差等都不复存在了，而且类似于Instant和Duration，提供了<em>plus|minus[Days|Weeks|Months|Years]</em>等方法可用于数学计算。此外，两个LocalDateTime只差不再是Duration，而是<em>时段</em>(Period)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造本地日期/时间</span></div><div class="line">LocalDate nowDate = LocalDate.now();</div><div class="line">LocalTime nowTime = LocalTime.now();</div><div class="line">LocalDateTime ofDateTime = LocalDateTime.of(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">System.out.println(nowDate);</div><div class="line">System.out.println(nowTime);</div><div class="line">System.out.println(ofDateTime);</div><div class="line"><span class="comment">//数学计算</span></div><div class="line">LocalDate nowDateMinusYears = nowDate.minusYears(<span class="number">1</span>);</div><div class="line">System.out.println(nowDateMinusYears);</div><div class="line">System.out.println(nowDateMinusYears.isLeapYear());</div><div class="line"><span class="comment">//计算两个LocalDateTime之间的Period</span></div><div class="line">LocalDate springFestival = LocalDate.of(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">LocalDate nationalDay = LocalDate.of(<span class="number">2017</span>, <span class="number">10</span>, <span class="number">1</span>);</div><div class="line">Period period = springFestival.until(nationalDay);</div><div class="line">System.out.println(period);</div><div class="line"><span class="keyword">long</span> periodInDays = springFestival.until(nationalDay, ChronoUnit.DAYS);</div><div class="line">System.out.println(periodInDays);</div></pre></td></tr></table></figure></p>
<p>如果要获取/设置已经用LocalDate、LocalTime、LocalDateTime表示的某个时间中某个字段(如：年、月、日、时、分、秒)的值，对应的也有<em>get|withYear|Minute</em>等方法(略好奇为什么设置不是set而是with……)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字段值操作</span></div><div class="line">Month month = nowDate.getMonth();</div><div class="line">DayOfWeek dayOfWeek = nowDate.getDayOfWeek();</div><div class="line">System.out.println(month);</div><div class="line">System.out.println(dayOfWeek);</div><div class="line">LocalTime withTime = nowTime.withHour(<span class="number">0</span>).withMinute(<span class="number">0</span>).withSecond(<span class="number">0</span>).withNano(<span class="number">0</span>);</div><div class="line">System.out.println(withTime);</div></pre></td></tr></table></figure></p>
<p>对LocalDate而言，<em>with</em>方法还有一种特殊的用法，就是通过<em>日期校正器</em>(TemporalAdjusters)，直接计算出<em>first|lastDayOf(Next)Month|Year</em>(今年/本月/次月/明年的第一天/最后一天)、<em>first/last/dayOfweekInMonth</em>(本月中的第一个/最后一个/第X个星期X)、<em>next|previous(OrSame)</em>(下一个/上一个(或同一个)星期X)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用TemporalAdjusters</span></div><div class="line">LocalDate aDate = LocalDate.of(<span class="number">2017</span>, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">LocalDate firstDayOfNextMonth = aDate.with(TemporalAdjusters.firstDayOfNextMonth());</div><div class="line">LocalDate lastDayOfYear = aDate.with(TemporalAdjusters.lastDayOfYear());</div><div class="line">LocalDate firstFridayInMonth = aDate.with(TemporalAdjusters.firstInMonth(DayOfWeek.FRIDAY));</div><div class="line">LocalDate nextOrSameWednesday = aDate.with(TemporalAdjusters.nextOrSame(DayOfWeek.WEDNESDAY));</div><div class="line">LocalDate previousWednesday = aDate.with(TemporalAdjusters.previous(DayOfWeek.WEDNESDAY));</div><div class="line">System.out.println(firstDayOfNextMonth);</div><div class="line">System.out.println(lastDayOfYear);</div><div class="line">System.out.println(firstFridayInMonth);</div><div class="line">System.out.println(nextOrSameWednesday);</div><div class="line">System.out.println(previousWednesday);</div></pre></td></tr></table></figure></p>
<h4 id="带时区的日期时间"><a href="#带时区的日期时间" class="headerlink" title="带时区的日期时间"></a>带时区的日期时间</h4><p>虽说时区完全就是一个人为的概念，但带有时区的时间反而更符合实际情况，Java8用ZonedDateTime来表示这种时间。</p>
<p>首先，它可以和LocalDateTime一样直接构造出来，无非是多了一个表示时区ZoneId作为参数。其次，它也可以从LocalDateTime转化而来，或者转化为LocalDateTime，用的是<em>LocalDateTime#atZone</em>和<em>ZonedDateTime#toLocalDateTime</em>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">LocalDateTime localDateTime = LocalDateTime.of(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">ZonedDateTime fromLocalDateTime = localDateTime.atZone(ZoneId.of(<span class="string">"UTC"</span>));</div><div class="line">System.out.println(fromLocalDateTime);</div><div class="line">ZonedDateTime ofZonedDateTime = ZonedDateTime.of(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, ZoneId.of(<span class="string">"UTC"</span>));</div><div class="line">System.out.println(ofZonedDateTime);</div><div class="line">LocalDateTime toLocalDateTime = ofZonedDateTime.toLocalDateTime();</div><div class="line">System.out.println(toLocalDateTime);</div></pre></td></tr></table></figure></p>
<p>ZonedDateTime和上面其他所有类一样，也提供了非常多用于数学计算的方法，当然由于涉及时区、夏令时等的计算，应当在实现上会更复杂，不过在中国很少开发涉及这些的程序，我也就没有过多去关注了。</p>
<h4 id="格式化和解析"><a href="#格式化和解析" class="headerlink" title="格式化和解析"></a>格式化和解析</h4><p>个人觉得格式化和解析这一段同以前的java.text.DateFormat和java.text.SimpleDateFormat类似乎没有太大的变化，同样可以把一个日期/时间做/从3种不同形式的格式化/解析，分别是标准格式、本地化格式和自定义格式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">LocalDateTime now = LocalDateTime.now();</div><div class="line"><span class="comment">//标准格式</span></div><div class="line">String isoLocalDateTime = DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(now);</div><div class="line">System.out.println(isoLocalDateTime);</div><div class="line"><span class="comment">//本地化格式</span></div><div class="line">String fullLocalizedDateTime = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).format(now);</div><div class="line">System.out.println(fullLocalizedDateTime);</div><div class="line"><span class="comment">//自定义格式</span></div><div class="line">String patternDateTime = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>).format(now);</div><div class="line">System.out.println(patternDateTime);</div><div class="line"><span class="comment">//解析</span></div><div class="line">ZonedDateTime zonedDateTime = ZonedDateTime.parse(<span class="string">"2017-01-01T00:00:00.000+08:00[Asia/Shanghai]"</span>,DateTimeFormatter.ISO_ZONED_DATE_TIME);</div><div class="line">System.out.println(zonedDateTime);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过去，在Java中处理日期和时间时，无外乎这两个类(以及它们的子类)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.util.Date&lt;/li&gt;
&lt;li&gt;java.util.Calendar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但它们固有一些缺陷，到了Java8，我们有了更多更好的选择，包括又不限于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.time.Instant&lt;/li&gt;
&lt;li&gt;java.time.Duration&lt;/li&gt;
&lt;li&gt;java.time.format.DateTimeFormatter&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java8" scheme="http://www.lx1992.com.cn/categories/java8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8学习之Stream API</title>
    <link href="http://www.lx1992.com.cn/2017/02/09/java8-the-stream-api/"/>
    <id>http://www.lx1992.com.cn/2017/02/09/java8-the-stream-api/</id>
    <published>2017-02-09T11:33:53.000Z</published>
    <updated>2017-02-16T09:14:22.399Z</updated>
    
    <content type="html"><![CDATA[<p>Java8在集合框架中添加了Stream API。Stream API的作用也是处理集合中的元素，但和传统的迭代器相比，应该说在性能上更具优势。Stream的使用分成3个步骤。</p>
<ol>
<li>创建一个Stream</li>
<li>描述要做什么，即指定一个或多个将一个Stream转化为另一个Stream的<em>中间操作</em></li>
<li>要求产生结果，即使用<em>终止操作</em><a id="more"></a>
</li>
</ol>
<h4 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h4><p>Java8中，不单是所有集合的实现均提供了stream()方法，常用的还包括：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//使用Collection接口的stream方法</div><div class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line">list.add(&quot;Hello World&quot;);</div><div class="line">Stream&lt;String&gt; stream1 = list.stream();</div><div class="line"></div><div class="line">//使用Stream.of静态创建流</div><div class="line">Stream&lt;String&gt; stream2 = Stream.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;);</div><div class="line"></div><div class="line">//从数组转换Stream</div><div class="line">String[] array = new String[]&#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;&#125;;</div><div class="line">Stream&lt;String&gt; stream3 = Arrays.stream(array);</div><div class="line"></div><div class="line">//创建空的Stream</div><div class="line">Stream&lt;String&gt; stream4 = Stream.empty();</div><div class="line"></div><div class="line">//创建无限长度的Stream(含有无限多个随机数)</div><div class="line">Stream&lt;Double&gt; stream5 = Stream.generate(Math::random);</div><div class="line"></div><div class="line">//创建无限长度的Stream(含有无穷递增数列)</div><div class="line">Stream&lt;Integer&gt; stream6 = Stream.iterate(0, (val) -&gt; val + 1);</div></pre></td></tr></table></figure></p>
<p>也就是说，除了从集合转换，我们还可以静态创建，甚至直接生成可能长度都是无限的Stream。但是，Stream本身并不存储其中的元素，这也就是为什么可以有长度无限的Stream，真正的存储依赖其底层集合，或者动态产生。</p>
<h4 id="Stream的中间操作"><a href="#Stream的中间操作" class="headerlink" title="Stream的中间操作"></a>Stream的中间操作</h4><p>常用的Stream中间操作包括<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//过滤出包含某个特定条件的所有元素</div><div class="line">Stream&lt;String&gt; filter = stream.filter(word -&gt; word.length() &gt; 5);</div><div class="line">//对流中值进行某种形式的转化</div><div class="line">Stream&lt;Integer&gt; map = stream.map(String::length);</div><div class="line">//提取子流：裁剪到指定长度</div><div class="line">Stream&lt;String&gt; limit = stream.limit(5);</div><div class="line">//提取子流：跳过前面若干元素</div><div class="line">Stream&lt;String&gt; skip = stream.skip(5);</div><div class="line">//连接两个流</div><div class="line">Stream&lt;String&gt; concat = Stream.concat(Stream.of(&quot;Hello&quot;), Stream.of(&quot;World&quot;));</div><div class="line">//对流中的元素调用某个方法，然后返回同样的流</div><div class="line">Stream&lt;String&gt; peek = stream.peek(System.out::println);</div><div class="line">//对流中元素去重</div><div class="line">Stream&lt;String&gt; distinct = stream.distinct();</div><div class="line">//对流中元素排序</div><div class="line">Stream&lt;String&gt; sorted = stream.sorted(Comparator.reverseOrder());</div></pre></td></tr></table></figure></p>
<p>其中最为关键的2种操作当属<em>filter</em>和<em>map</em>方法。前者传入一个从T到boolean的方法，它会产生一个只包含符合特定条件之元素的新流；后者传入一个从T到R的方法，会在流中的每个元素上执行传入的代码以完成转化；与map方法类似的还有一个<em>flatMap</em>方法，它的背后另有一套复杂理论，不是Stream的专属，但在流中，它的作用是将一个包含多个流的流展开为一个流，即从Stream<stream<t>&gt;到Stream<t>。</t></stream<t></p>
<p>这里对应Stream的第2个特点：Stream操作不会改变原Stream，而是返回一个持有操作结果的新Stream。</p>
<h4 id="Optional操作"><a href="#Optional操作" class="headerlink" title="Optional操作"></a>Optional操作</h4><p>在Stream终止操作之前呢，插一段关于Optional的。</p>
<p>所谓Optional，和它的字面意思一样，是对一个值的封装，既然是“可选的”，那么封装的这个值就有可能不存在，但是Optional不会返回null，因此<em>相对来说</em>更安全。为什么是相对来说呢？因为如果只是用get()和ifPresent()两个方法来取出Optional封装的值，以及判断Optional是否封装了值，未免太生硬了，而且还是避免不了NPE。</p>
<p>首先如何创建Optional呢？使用of()和empty()方法，但这段逻辑Java8已经帮我们封装出了一个ofNullable()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private static Optional&lt;String&gt; getStringOptional(String str) &#123;</div><div class="line">    //如果str为null，返回空的Optional，否则返回封装了str的Optional</div><div class="line">    //完全等价于 return Optional.ofNullable(str);</div><div class="line">    return str == null ? Optional.empty() : Optional.of(str);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其次如何使用Optional呢？使用ifPresent()和orElse(T)/orElseGet|Throw()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//如果Optional中有值，就执行System.out::println</div><div class="line">getStringOptional(null).ifPresent(System.out::println);</div><div class="line">getStringOptional(&quot;ABC&quot;).ifPresent(System.out::println);</div><div class="line">//如果Optional中没有值，就代换成空串/执行某个方法获取值/抛出异常</div><div class="line">getStringOptional(null).orElse(&quot;&quot;);</div><div class="line">getStringOptional(null).orElseGet(() -&gt; String.valueOf(System.currentTimeMillis()));</div><div class="line">getStringOptional(null).orElseThrow(NoSuchElementException::new);</div></pre></td></tr></table></figure></p>
<p>另外Optional也提供了map()和flatMap()方法，用途和Stream中是一样的，我们可以把Optional想象成一个长度非0即1的Stream，这样理解起来就会容易有一些。</p>
<h4 id="Stream的终止操作"><a href="#Stream的终止操作" class="headerlink" title="Stream的终止操作"></a>Stream的终止操作</h4><p>Stream的终止操作相对前面两者要复杂许多，将分成几个部分。这里提前给出流的第3个特点：操作可能会被延迟执行，意思是说前边的中间操作，看上去像是调用了一个或多个方法，但它们并不是立即就被执行的，而是要等到终止操作到来时才会被执行。</p>
<h6 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h6><p>所谓聚合操作，就是以某种形式，将流中的元素组合为一个，使用reduce()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; stream1 = Stream.iterate(1, val -&gt; val + 1).limit(10);</div><div class="line">//聚合流的第一种形式，等价于sum=1, sum+=2, sum+=3...</div><div class="line">Optional&lt;Integer&gt; sum1 = stream1.reduce(Integer::sum);</div><div class="line">//聚合流的第二种形式，等价于sum=0, sum+=1, sum+=2...</div><div class="line">Integer sum2 = stream1.reduce(0, Integer::sum);</div><div class="line"></div><div class="line">Stream&lt;String&gt; stream2 = Stream.of(&quot;0&quot;, &quot;12&quot;, &quot;345&quot;, &quot;6789&quot;);</div><div class="line">//聚合流的第三种形式</div><div class="line">Integer sum3 = stream2.reduce(0, (sum, word) -&gt; sum += word.length(), Integer::sum);</div></pre></td></tr></table></figure></p>
<p>聚合最简单的实现就是从流的前两个元素开始，或者从一个给定的值和流的第一个元素开始，不断将聚合函数应用到流中的其他元素上。第三种形式相对特殊一些，本例是求String流中各个字符串的总长度，但sum+=word.length()不满足BinaryOperator的定义（一个满足(T, T) -&gt; T的函数）。</p>
<p>Java8另外提供了几个简便，但是常用的reduce操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//返回流中元素个数</div><div class="line">Long count = stream1.count();</div><div class="line">//返回流中元素最小值</div><div class="line">Optional&lt;Integer&gt; min = stream1.min(Integer::compareTo);</div><div class="line">//返回流中元素最大值</div><div class="line">Optional&lt;Integer&gt; max = stream1.max(Integer::compareTo);</div><div class="line">//返回流中满足指定条件的第一个元素</div><div class="line">Optional&lt;Integer&gt; findFirst = stream1.filter(val -&gt; val &gt; 5).findFirst();</div><div class="line">//返回流中满足指定条件的任意一个元素(并行计算)</div><div class="line">Optional&lt;Integer&gt; findAny = stream1.parallel().filter(val -&gt; val &gt; 5).findAny();</div><div class="line">//返回返回流中是否有元素满足指定条件(并行计算)</div><div class="line">Boolean anyMatch = stream1.parallel().anyMatch(val -&gt; val &gt; 5);</div><div class="line">//返回返回流中是否全部元素满足指定条件</div><div class="line">Boolean allMatch = stream1.allMatch(val -&gt; val &gt; 5);</div><div class="line">//返回返回流中是否没有元素满足指定条件</div><div class="line">Boolean noneMatch = stream1.noneMatch(val -&gt; val &gt; 100);</div></pre></td></tr></table></figure></p>
<h6 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h6><p>收集结果一般用在对流进行一番处理之后再来访问流中的元素。除了传统的iterator()方法可以返回这个流的迭代器，以及前文中使用过的toArray()方法将这个流转换成一个数组，Stream提供了collect()方法用于将元素收集起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; stream = Stream.iterate(1, val -&gt; val + 1).limit(10);</div><div class="line">//收集到ArrayList中</div><div class="line">//完全等价于 stream.collect(Collectors.toCollection(ArrayList::new))</div><div class="line">ArrayList&lt;Integer&gt; arrayList = stream.collect(ArrayList::new, ArrayList::add, ArrayList::addAll);</div><div class="line">//收集到Set和List中(不考虑Collection的具体实现)</div><div class="line">Set&lt;Integer&gt; set = stream.collect(Collectors.toSet());</div><div class="line">List&lt;Integer&gt; list = stream.collect(Collectors.toList());</div><div class="line">//收集成一个String，元素之间以英文逗号分割</div><div class="line">String string = stream.map(String::valueOf).collect(Collectors.joining(&quot;,&quot;));</div><div class="line">//收集成一个特殊的函数，一次性取得count/min/max/avg/sum</div><div class="line">IntSummaryStatistics statistics = stream.collect(Collectors.summarizingInt(Integer::intValue));</div><div class="line">//将表示JVM属性的流收集成一个Map&lt;Object, Object&gt;</div><div class="line">Stream&lt;Map.Entry&lt;Object, Object&gt;&gt; propertyStream = System.getProperties().entrySet().stream();</div><div class="line">Map&lt;Object, Object&gt; propertyMap = propertyStream.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (existKey, newKey) -&gt; newKey));</div></pre></td></tr></table></figure></p>
<p>对于收集成Map的情况，toMap()方法需要3个参数，第1个是Map的Key，第2个是Map的Value，这两个比较基础，但第3个是一个函数，用于处置Key重复的情形，例子中直接舍弃了旧的留下新的，如果需要两者均保留，那么一是收集结果将变成类似Map<object, set<object="">&gt;，二是上面第3个参数的逻辑将变成重新实例化一个Set将新旧Set中的值全部添加进去。</object,></p>
<h6 id="分组和分片"><a href="#分组和分片" class="headerlink" title="分组和分片"></a>分组和分片</h6><p>上一节中我们收集Map的行为，实际上就是这里的分组，我们大可比不那般简单粗暴，完全可以使用groupingBy()方法代替<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Map.Entry&lt;Object, Object&gt;&gt; propertyStream = System.getProperties().entrySet().stream();</div><div class="line">//按Key分组</div><div class="line">Map&lt;Object, List&lt;Map.Entry&gt;&gt; propertyMap = propertyStream.collect(Collectors.groupingBy(Map.Entry::getKey));</div><div class="line">//按Value是否为空分组</div><div class="line">Map&lt;Boolean, List&lt;Map.Entry&gt;&gt; propertyIsBlankMap = propertyStream.collect(Collectors.groupingBy(entry -&gt; entry.getValue().toString().equals(&quot;&quot;)));</div></pre></td></tr></table></figure></p>
<p>groupingBy()方法的参数是分类的依据，一般地，指定Key，如果指定了一个返回布尔值的函数，那么整个流将按照这个布尔值的真假分成2类。</p>
<p>而分类后的Map的Value部分，一般地，为原始流中的某个元素，如果我们要对它进行加工处理，需要指定一个叫做downstream的东西，也即groupingBy()方法的第2个参数，但实际上，在使用之前应当考虑是都真的有必要使用非常非常复杂的聚合表达式，这里只举最简单的例子（可能不是十分恰当）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//按每个属性名对应的属性值个数分组(本例中都是1:1)</div><div class="line">Map&lt;Object, Long&gt; propertyCountMap = propertyStream.collect(Collectors.groupingBy(Map.Entry::getKey,Collectors.counting()));</div><div class="line">//按每个属性名对应的属性值的长度的数学特征分组</div><div class="line">Map propertyLengthMap = propertyStream.collect(Collectors.groupingBy(Map.Entry::getKey,Collectors.summarizingInt(entry -&gt; entry.getValue().toString().length())));</div></pre></td></tr></table></figure></p>
<h4 id="原始类型流"><a href="#原始类型流" class="headerlink" title="原始类型流"></a>原始类型流</h4><p>之前我们需要包含原始数据类型的流时，用的都是他们的包装类型，诸如Stream<integer>，Stream<double>等，尽管有对基本数据类型的自动装箱拆箱机制，但多少对性能有一定影响。Java8同期提供了3种基本数据类型——int、long、double对应的Stream，分别是IntStream、LongStream、DoubleStream，但不提供byte、short、char、boolean、float类型的原始类型流。</double></integer></p>
<p>原始类型流的创建，以及其方法的调用和对象流有几分相似，另外还支持很对象流的相互转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//直接创建int、long、double三种原始类型流</div><div class="line">IntStream stream1 = Arrays.stream(new int[]&#123;1, 2, 3, 4, 5, 5, 6, 7, 8, 9&#125;);</div><div class="line">LongStream stream2 = LongStream.rangeClosed(1, 100);</div><div class="line">DoubleStream stream3 = new Random().doubles();</div><div class="line">//从对象流转换</div><div class="line">Stream&lt;String&gt; stream4 = Stream.of(&quot;0&quot;, &quot;12&quot;, &quot;345&quot;, &quot;6789&quot;);</div><div class="line">IntStream stream5 = stream4.mapToInt(String::length);</div><div class="line">//包装回对象流</div><div class="line">Stream&lt;Integer&gt; stream6 = stream1.boxed();</div></pre></td></tr></table></figure></p>
<h4 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h4><p>其实早在前面就提到过了并行操作，缺省的，当使用stream()方法获得一个流时，它是串行的，要得到并行流，应当使用parallelStream()方法，或者在串行流上调用parallel()方法。既然是并行，就不得不考虑并发错误，这里需要注意的点和从前是一样的。另外在并行条件下不得不提的是有序问题，一般地，并发执行意味着结果的不确定性，但Stream对此提供了一定的保证，如果我们没有保持有序的需求，可以调用unordered()让后续的操作更高效地并行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java8在集合框架中添加了Stream API。Stream API的作用也是处理集合中的元素，但和传统的迭代器相比，应该说在性能上更具优势。Stream的使用分成3个步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个Stream&lt;/li&gt;
&lt;li&gt;描述要做什么，即指定一个或多个将一个Stream转化为另一个Stream的&lt;em&gt;中间操作&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;要求产生结果，即使用&lt;em&gt;终止操作&lt;/em&gt;
    
    </summary>
    
      <category term="Java8" scheme="http://www.lx1992.com.cn/categories/java8/"/>
    
    
  </entry>
  
  <entry>
    <title>（备忘）Android应用中图片类资源分辨率参考</title>
    <link href="http://www.lx1992.com.cn/2017/02/04/android-mipmap-resolution/"/>
    <id>http://www.lx1992.com.cn/2017/02/04/android-mipmap-resolution/</id>
    <published>2017-02-04T15:21:51.000Z</published>
    <updated>2017-02-04T15:33:38.186Z</updated>
    
    <content type="html"><![CDATA[<p>偶尔也会做点Android的应用，每每用到图片素材，在寻找和加工过程中，多少会疑惑什么分辨率合适。这次刚好参考了一些别人的做法，加上自己找了几种不同分辨率的手机测试了下效果说得过去，记下来做个备忘。</p>
<p>首先现在用AS建好工程以后图片类素材分了5种DPI：mdpi、hdpi、xhdpi、xxhdpi、xxxhdpi，每种DPI下都预置了Android的小机器人作为应用的启动器图标，它的分辨率就可以做为一个参考</p>
<table>
<thead>
<tr>
<th>DPI</th>
<th>分辨率</th>
</tr>
</thead>
<tbody>
<tr>
<td>mdpi</td>
<td>48</td>
</tr>
<tr>
<td>hdpi</td>
<td>72</td>
</tr>
<tr>
<td>xhdpi</td>
<td>96</td>
</tr>
<tr>
<td>xxhdpi</td>
<td>144</td>
</tr>
<tr>
<td>xxxhdpi</td>
<td>192</td>
</tr>
</tbody>
</table>
<p>有些情况下可能还是觉得这个分辨率大了，所以另外找了Google官方的<a href="https://design.google.com/icons/" target="_blank" rel="external">Material Design Icons</a>，它里面提供的大多是这个分辨率</p>
<table>
<thead>
<tr>
<th>DPI</th>
<th>分辨率</th>
</tr>
</thead>
<tbody>
<tr>
<td>mdpi</td>
<td>24</td>
</tr>
<tr>
<td>hdpi</td>
<td>36</td>
</tr>
<tr>
<td>xhdpi</td>
<td>48</td>
</tr>
<tr>
<td>xxhdpi</td>
<td>72</td>
</tr>
<tr>
<td>xxxhdpi</td>
<td>96</td>
</tr>
</tbody>
</table>
<p>做Icon非常适合。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶尔也会做点Android的应用，每每用到图片素材，在寻找和加工过程中，多少会疑惑什么分辨率合适。这次刚好参考了一些别人的做法，加上自己找了几种不同分辨率的手机测试了下效果说得过去，记下来做个备忘。&lt;/p&gt;
&lt;p&gt;首先现在用AS建好工程以后图片类素材分了5种DPI：mdpi
    
    </summary>
    
      <category term="Android" scheme="http://www.lx1992.com.cn/categories/android/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8学习之默认方法</title>
    <link href="http://www.lx1992.com.cn/2017/01/30/java8-default-methods/"/>
    <id>http://www.lx1992.com.cn/2017/01/30/java8-default-methods/</id>
    <published>2017-01-29T16:19:56.000Z</published>
    <updated>2017-01-29T16:43:52.479Z</updated>
    
    <content type="html"><![CDATA[<p>这部分是关于的Java8在接口中定义默认方法和静态方法的。实话说，我一时没看出来这个和Lambda表达式有什么关系，也不知道为什么书上会安排在同一章，我还是拆来来吧。</p>
<a id="more"></a>
<h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><p>同样在Java8以前，接口当中是不会存在任何方法实现的，在某种程度上可以看做纯抽象的的方法。</p>
<p>这就有一个问题，想象有一个接口I，经过若干次迭代，它已经有了A、B、C、D……N个实现类，突然有一天，接口I中不得不新增一个方法，然后它的N个实现类要一一实现这个新的方法吗？可不可以让接口中这个新的方法提供一个默认实现呢？</p>
<p>恐怕我们很容易联想到早些年AWT中的事件模型，例如窗口事件java.awt.event.WindowListener，它有7个方法未实现，而很可能我们只需要点击关闭窗口时弹出一个确认对话框一个功能……于是就有了java.awt.event.WindowAdapter这么个东西，把每个方法都做了一个空的实现。这样做当然不是不可以，但利用Java8的默认方法要简单不少，用default关键字声明默认方法即可，至少不用定义Adapter类了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface Lived &#123;</div><div class="line">    default String getDescription() &#123;</div><div class="line">        return &quot;有生命的&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过新的问题又出现了，Java是允许接口多继承的，万一接口A、B都对某个共享方法X提供了默认实现，偏偏接口C又同时继承了接口A、B怎么办？是不是突然有种当年学C++时解决菱形继承的既视感？莫方，Java8对这种问题的解决办法简单粗暴——开发人员自己决定！也就是说，你必须写代码来决定，究竟是自己再重写一次方法X，还是从A、B的实现中选一个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public interface Named &#123;</div><div class="line">    default String getDescription() &#123;</div><div class="line">        return &quot;有名字的&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Human implements Lived, Named &#123;</div><div class="line">    //必须重写冲突的getDescription方法</div><div class="line">    @Override</div><div class="line">    public String getDescription() &#123;</div><div class="line">        return &quot;人类&quot;;</div><div class="line">        //或可以指定某个父接口的默认实现</div><div class="line">        //return Lived.super.getDescription();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再换一种情况，假设类C继承了类B又实现了接口A，偏偏接口A对方法X提供了默认实现，类B覆盖了这个实现，在C不重写方法X的情况下，生效的将会是类B中的实现，接口A中的默认实现会被忽略，这称为“类优先”原则。</p>
<p>这就有问题了，而且我个人感觉不是很容易被察觉到：接口也是一种特殊的类，它也是继承Object类的，根据类优先原则，我们就永远不可能为Object类中的方法定义默认实现。</p>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>不知道你有没有被诸如Collection/Collections这样长得贼像的“兄弟”坑过呢？反正我是有，有时候着急了，或者敲快了，还对着错误一头雾水的。其实，这两家伙，前者是接口，后者是类，而且后者为前者提供一些工具方法或者工厂方法。</p>
<p>Java8开始，不仅允许在接口中添加默认方法，还允许添加静态方法了！不知道可不可以认为像Collections这样的类没有太大用处了呢？</p>
<p>允许这么做是有原因的。即使是默认方法，也需要通过Lambda表达式实例化函数式接口，或者某个实现了这个接口的类的实例才可以访问到，这让静态工厂方法们情何以堪啊？当然下面这个例子有点随意了=.=<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface Lived &#123;</div><div class="line">    static boolean instanceOf(Object obj) &#123;</div><div class="line">        return obj instanceof Lived;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分是关于的Java8在接口中定义默认方法和静态方法的。实话说，我一时没看出来这个和Lambda表达式有什么关系，也不知道为什么书上会安排在同一章，我还是拆来来吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Java8" scheme="http://www.lx1992.com.cn/categories/java8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8学习之Lambda表达式</title>
    <link href="http://www.lx1992.com.cn/2017/01/29/java8-lambda-expressions/"/>
    <id>http://www.lx1992.com.cn/2017/01/29/java8-lambda-expressions/</id>
    <published>2017-01-29T11:23:04.000Z</published>
    <updated>2017-01-29T16:43:52.463Z</updated>
    
    <content type="html"><![CDATA[<p>Java8，准确地说应该是JavaSE 8，发布挺长时间了（废话！Java9今年上半年都要出了！），但除了实习那会听同事做了场分享，自己一直没有系统地学习一下。这些天整了本《写给大忙人看的JavaSE 8》，抽点时间读一读，这个系列的博客当是读书笔记了。这第一部分是lambda表达式。</p>
<a id="more"></a>
<h4 id="何为lambda表达式"><a href="#何为lambda表达式" class="headerlink" title="何为lambda表达式"></a>何为lambda表达式</h4><p><em>lambda表达式是一段可以传递的代码。</em></p>
<p>过去在多线程、回调等情境（大多是内部类？）下，我们都会把一段代码传递给其他调用者，而这段代码稍后才会被调用。而纯面向对象的Java是不支持传递代码块的，但在Java8中，可以。</p>
<p>第一个lambda表达式，包括两部分——一是代码块本身，二是传递给代码块的参数，注意lambda的返回类型永远是推导来的，不需要显式指定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 格式：参数+箭头+表达式</div><div class="line">(int a, int b) -&gt; foo.bar(a, b);</div></pre></td></tr></table></figure></p>
<p>但lambda的格式也不是说就这么死板，有几种特殊情况：如果代码块不是一个表达式（多行代码、处理异常等），那么就用大括号包裹起来；如果没有参数，那么将小括号置空；如果参数的类型是可以推导的，那么参数类型可以省略；如果有且只有一个可以被推导的参数，那么甚至可以省略小括号。</p>
<h4 id="lambda表达式能做什么"><a href="#lambda表达式能做什么" class="headerlink" title="lambda表达式能做什么"></a>lambda表达式能做什么</h4><p><em>lambda表达式有且只能用于函数式接口转换</em></p>
<p>对只包含一个抽象方法的接口，我们可以用lambda表达式来创建该接口的实例，这种接口也被称作函数是接口。而所谓“一个抽象方法”，则是因为Java8允许在接口中定义非抽象方法。</p>
<p>以java.util.Comparator接口为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@FunctionalInterface</div><div class="line">public interface Comparator&lt;T&gt; &#123;</div><div class="line">    //抽象方法</div><div class="line">    int compare(T var1, T var2);</div><div class="line"></div><div class="line">    //Object类中有实现，不是抽象方法</div><div class="line">    boolean equals(Object var1);</div><div class="line"></div><div class="line">    //有默认实现，不是抽象方法</div><div class="line">    default Comparator&lt;T&gt; reversed() &#123;</div><div class="line">        return Collections.reverseOrder(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //以下省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>符合上面对函数式接口的定义，因此Comparator是函数式接口，可以通过lambda表达式实例化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Comparator comparator = (a, b) -&gt; foo.bar(a, b);</div></pre></td></tr></table></figure></p>
<p>至于注解@FunctionalInterface，意识可以让编译器帮着检查这个接口符不符合函数式接口的定义，二是生成JavaDoc时对这个接口有一个标记，因此推荐使用。</p>
<h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p>对于类似这样的lambda表达式，我们有更方便的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//下面两者是等价的</div><div class="line">(x) -&gt; foo.bar(x)</div><div class="line">foo::bar</div></pre></td></tr></table></figure></p>
<p>实际上就是将foo这个对象中的boo方法，整个传递给某个函数式接口。方法引用又分成三类</p>
<ul>
<li>对象::实例方法</li>
<li>类::静态方法</li>
<li>类::实例方法</li>
</ul>
<p>前两个没有什么特殊之处，注意对象可以是自己或者自己的父类（即this或super），但最后一个，类如何调用实例方法呢？实践后会发现，这种情况下总要求函数式接口中那个抽象方法的参数要比引用的方法的参数多一个，而且这多出来的参数就是类的实例。</p>
<p>更进一步地，我们还可以引用类的构造方法，不过方法名不是我们在反射时见到的<init>，就是简单明了的new了～再特殊一点，如果引用的是数组的构造方法，则需要隐含这一个参数，即数组长度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//引用类的实例方法，下面两者也是等价的</div><div class="line">String::equals</div><div class="line">(x, y) -&gt; x.equals(y)</div><div class="line"></div><div class="line">//引用构造方法</div><div class="line">String::new</div><div class="line">int[]::new</div></pre></td></tr></table></figure></init></p>
<h4 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h4><p>在Java8以前，这样的代码会产生编译错误：要求将count声明为final类型，因为我们在一个内部类中引用了外部类的局部变量count，很可能当内部类要用到count时，外部类已经不存在了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void runnableWithoutLambda(int count) &#123;</div><div class="line">    Runnable runnable = new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">                System.out.println(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    new Thread(runnable).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但到了Java8，这样做却被“允许”了，当然不可能是无条件的放开，只是不一定要显式地声明final——“等效于final”即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void runnableWithLambda(int count) &#123;</div><div class="line">    Runnable runnable = () -&gt; &#123;</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            System.out.println(i);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    new Thread(runnable).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>事实上，像count这样既不是lambda表达式的参数，也不是定义在lambda表达式的代码块中的变量，被称为“自有变量”，而这个特性被称为“捕获”，含有自有变量的代码块被称为“闭包”。为了实现这个特性，lambda表达式会存储这些变量，既然这些变量等效于final，它们就不允许被修改，即使编译器不报错，尤其在多线程条件下，结果是完全不可预估的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java8，准确地说应该是JavaSE 8，发布挺长时间了（废话！Java9今年上半年都要出了！），但除了实习那会听同事做了场分享，自己一直没有系统地学习一下。这些天整了本《写给大忙人看的JavaSE 8》，抽点时间读一读，这个系列的博客当是读书笔记了。这第一部分是lambda表达式。&lt;/p&gt;
    
    </summary>
    
      <category term="Java8" scheme="http://www.lx1992.com.cn/categories/java8/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Redmine「项目管理」服务</title>
    <link href="http://www.lx1992.com.cn/2017/01/17/install-redmine-server/"/>
    <id>http://www.lx1992.com.cn/2017/01/17/install-redmine-server/</id>
    <published>2017-01-17T13:44:50.000Z</published>
    <updated>2017-01-26T20:01:35.901Z</updated>
    
    <content type="html"><![CDATA[<p>Redmine是一款以Ruby on Rails撰写的项目管理和缺陷跟踪工具，和国产的禅道可能有几分类似，但和业内顶尖的Jira应该还是有一定差距的吧？但毕竟人家是开源免费的，相应的功能，诸如项目排期，Bug跟踪，Wiki什么的，对我们这种小团队而言基本也够用了。</p>
<a id="more"></a>
<p>现在我们来部署Redmine。先扯一句，网上挺多建议用Bitnami来部署的，的确也是，按照官方的教程来步骤真的挺复杂的，不过既然已入坑，就不半途而废了。首先当然是要下载好Redmine，才2M多，厉害啊，下载完后照例解压缩到/opt目录，另外，安装过程中要下载不少依赖，确保你的服务器能访问外网哈～</p>
<h4 id="检查Ruby和Rails环境"><a href="#检查Ruby和Rails环境" class="headerlink" title="检查Ruby和Rails环境"></a>检查Ruby和Rails环境</h4><p>我们即将部署的是最新的Redmine 3.3，这个版本要求Ruby 1.9.3+、Rails 4.2。绝大部分Linux发行版都是预装了Ruby的，可用这两个命令检查服务器上的Ruby和Rails版本，在我们的环境中，两者的版本分别是2.3.1和4.2.7.1，符合Redmine要求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查看Ruby版本</div><div class="line">ruby -v</div><div class="line"># 查看Rails版本</div><div class="line">rails -v</div></pre></td></tr></table></figure></p>
<h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>Redmine同样提供了对多种数据库的支持，我们还是选用MySQL。</p>
<p>MySQL侧，自然还是建立一个名为redmine的数据库和用户并授权了，这一步已经重复太多次了。</p>
<p>Redmine侧呢，将./config目录下的database.yml.example文件重命名为database.yml，打开它可以看到这个文件是按着环境分级的，目前我们只需要production环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">production:</div><div class="line">  adapter: mysql2</div><div class="line">  database: redmine</div><div class="line">  host: 127.0.0.1</div><div class="line">  port: 3306</div><div class="line">  username: redmine</div><div class="line">  password: &quot;password&quot;</div><div class="line">  encoding: utf8</div></pre></td></tr></table></figure></p>
<p>注意adapter字段是mysql2而不是mysql，据说前者性能高于后者，相关的依赖下一步中我们会安装；port字段默认是没有的，但当你改变了数据库服务器默认的3306端口时就需要加上了；password字段本身的引号最好不要误删。</p>
<h4 id="关于gem"><a href="#关于gem" class="headerlink" title="关于gem"></a>关于gem</h4><p>这一段其实是写到后面又回过头来补充的。</p>
<p>后文中会多次出现一个叫做gem的东西。gem是以标准格式封装好的ruby程序或库，可以和java的jar做类比；但如果是在命令行中执行gem，其实是调用ruby的包管理器rubygem来管理gem包的行为，可以和nodejs的npm做类比。</p>
<p>在国内，由于某些原因，下载gem包的速度就两个字：呵呵，除了FQ，或者不停地retry，更直接的方法应当是更换国内的gem源。网上大部分资料都建议用淘宝源，但淘宝已经停止对这个源的维护了，后续的维护交由ruby-china进行，所以我们应该更换成ruby-china的源。对gem源的操作使用gem sources命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 添加ruby-china源</div><div class="line">gem sources -a https://gems.ruby-china.org/</div><div class="line"># 移除官方源</div><div class="line">gem sources -r https://rubygems.org/</div><div class="line"># 列出当前使用的源</div><div class="line">gem sources -l</div><div class="line"># 更新源的缓存</div><div class="line">gem sources -u</div></pre></td></tr></table></figure></p>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>Redmine的基本安装过程需要不少依赖，某些依赖又有别的依赖[汗……]，但总的来看，初期安装还不算多，就3个，mysql2、rmagick和rbpdf-font。</p>
<p>首先安装mysql2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb install libmysqlclient-dev</div><div class="line">gem insatll mysql2</div></pre></td></tr></table></figure></p>
<p>一开始我直接执行了第2步，好在mysql2也是蛮贴心的，提示我需要先执行第1步[赞]，安装前置依赖libmysqlclient-dev。</p>
<p>然后是安装RMagick，因为redmine处理一些图片时用到了一个叫做ImageMagick的库，而RMagick作为Ruby和ImageMagick的中间接口，自然也是必不可少的。</p>
<p>但这个的安装就没有mysql2那么幸运了，报错就提示我“可能缺少某些依赖”，可到底缺了啥，谁也不知道，幸好<a href="https://github.com/rmagick/rmagick#install" target="_blank" rel="external">官方文档</a>中说了它还依赖于libmagickwand-dev（咳咳，这个依赖又依赖好多组件哇……）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt install libmagickwand-dev</div><div class="line">gem install rmagick</div></pre></td></tr></table></figure></p>
<p>最后剩下rbpdf-font了，这个倒没影响我的安装，给我整了个在配置的时候报错[无语]，看在它没啥太复杂依赖的份上，原谅它吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install rbpdf-font</div></pre></td></tr></table></figure></p>
<h4 id="安装redmine"><a href="#安装redmine" class="headerlink" title="安装redmine"></a>安装redmine</h4><p>redmine使用gem bundler来管理自身的gem依赖，所以首先要安装bundler，然后方可使用bundler安装redmine所需的其他依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem install bundler</div><div class="line">bundle install --without development test</div></pre></td></tr></table></figure></p>
<p>注意哦，执行第2步的时候会去读取redmine目录下的Gemfile文件，所以要在redmine目录下执行～然后就静静看着bundler刷刷刷又下载了一堆依赖好了……</p>
<h4 id="安装后的几个步骤"><a href="#安装后的几个步骤" class="headerlink" title="安装后的几个步骤"></a>安装后的几个步骤</h4><p>我直接罗列出来了，每一步是干什么的也都给了注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 生成一个随机密钥供session存储使用</div><div class="line">bundle exec rake generate_secret_token</div><div class="line"># 创建数据库表结构</div><div class="line">RAILS_ENV=production bundle exec rake db:migrate</div><div class="line"># 加载初始数据</div><div class="line">RAILS_ENV=production REDMINE_LANG=zh bundle exec rake redmine:load_default_data</div></pre></td></tr></table></figure></p>
<p>这里我报了2个错</p>
<blockquote>
<p>warning: duplicated key at line 466 ignored: “inodot”<br>LoadError: cannot load such file – rbpdf-font</p>
</blockquote>
<p>第1个错误解决的办法是打开报错的这个文件（expanded.rb），按照提示，465行和466行重复了，不知道是个bug还是咋回事，注释掉其中一行就好了；</p>
<p>而第2个错一开始我还挺纠结了，也才有了安装依赖那一小节里边安装rbpdf-font的过程。其实，对于这种扩展依赖，还应该新建一个Gemfile.local文件，在里边加上对rbpdf-font的依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 添加到Gemfile.local中</div><div class="line">gem “rbpdf-font”, “~&gt;1.19.0”</div></pre></td></tr></table></figure></p>
<h4 id="其他几个配置"><a href="#其他几个配置" class="headerlink" title="其他几个配置"></a>其他几个配置</h4><p>至此redmine基本上已经安装完成了，确实也没那么简单，但还有几个可选的配置可以看一下。打开./config/configuration.yml（由configuration.yml.example重命名而来，和database.yml一样），里面有3个配置</p>
<ul>
<li>邮件通知</li>
<li>版本控制</li>
<li>附件目录</li>
</ul>
<p>其中，邮件通知，根据smtp服务不同，配置文件中已经提供了数种示例，肯定有适合的一种；版本控制，主要是配置同redmine整合的版本控制程序的路径等，默认自动检测一般不会有什么问题；附件目录相对比较重要，因为用户上传的东西什么的都在这里，应当要移动到安全性高一点、空间大一点的目录。</p>
<p>在configuration.yml中没有关于日志的配置，查阅<a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall" target="_blank" rel="external">官方文档</a>可知，这个配置是可选的，应当配置在additional_environment.rb中，格式形如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 构造Logger的3个参数分别是日志文件名、最多保留文件个数、单个文件最大大小(字节)</div><div class="line">config.logger = Logger.new(&apos;/path/to/logfile.log&apos;, 2, 1000000)</div><div class="line">config.logger.level = Logger::INFO</div></pre></td></tr></table></figure></p>
<p>最后还有一个名为setting.yml的配置文件，我们无需直接修改它，其中的配置项都可以在redmine运行起来以后，以管理员身份登录去修改。</p>
<h4 id="运行redmine"><a href="#运行redmine" class="headerlink" title="运行redmine"></a>运行redmine</h4><p>万事俱备只欠东风<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bundle exec rails server webrick -e production -b 0.0.0.0 -p 8080</div></pre></td></tr></table></figure></p>
<p>这个命令是用webrick作为http服务器来运行redmine，-e参数指定环境（我们也只有production环境），-b参数指定绑定的ip地址，-p参数指定绑定的端口号。redmine启动后即可通过浏览器访问，初始的用户名密码都是admin。</p>
<p>但是！webrick只适合测试环境使用，据说它有性能问题，网上更多的建议使用thin、puma、mongrel等代替。本着哪个简单用哪个，试试thin吧。</p>
<p>首先自然是安装thin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install thin</div></pre></td></tr></table></figure></p>
<p>和rbpdf-font相似，在Gemfile.local中再加入一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem &apos;thin&apos;</div></pre></td></tr></table></figure></p>
<p>然后重新运行就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bundle install --without development test</div></pre></td></tr></table></figure></p>
<p>使用thin作为http服务器后，redmine的启动方式有所改变，-e和-p的含义没变，-a指定绑定的且默认就是0.0.0.0，-d在后台运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">thin start -e production -a 0.0.0.0 -p 3000 -d</div></pre></td></tr></table></figure></p>
<p>一般地，还需要将redmine配置成service<!--，方法看[这里]()-->。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redmine是一款以Ruby on Rails撰写的项目管理和缺陷跟踪工具，和国产的禅道可能有几分类似，但和业内顶尖的Jira应该还是有一定差距的吧？但毕竟人家是开源免费的，相应的功能，诸如项目排期，Bug跟踪，Wiki什么的，对我们这种小团队而言基本也够用了。&lt;/p&gt;
    
    </summary>
    
      <category term="Redmine" scheme="http://www.lx1992.com.cn/categories/redmine/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建SonarQube「代码质量管理」服务</title>
    <link href="http://www.lx1992.com.cn/2017/01/17/install-sonarqube-server/"/>
    <id>http://www.lx1992.com.cn/2017/01/17/install-sonarqube-server/</id>
    <published>2017-01-17T06:19:42.000Z</published>
    <updated>2017-01-26T20:00:38.899Z</updated>
    
    <content type="html"><![CDATA[<p>sonarqube是一个代码质量管理工具，同样是<a href="https://github.com/SonarSource/sonarqube" target="_blank" rel="external">开源</a>的，说白了其实它做的事也是“代码静态分析”，和安装在IDE中的findbugs、checkstyle等插件有几分类似。官方称其支持20+种语言，对java的支持更是不在话下。</p>
<a id="more"></a>
<p>我也是在实习期间第一次接触到这个工具，公司里将它同jenkins这一持续集成工具整合，从而实现每每向git仓库提交代码就自动触发编码质量检查的目的。检查的结果呢，根据问题的类型和严重性，在其web界面上一目了然，老大快瞅瞅哪个程序猿儿欠下了哪些技术债[坏笑]。如果进一步和CI整合，还可以限制诸如代码质量达不到某个级别就不允许进一步操作等，从而确实提高编码质量。</p>
<p>现在我也在自己的云主机上搭建一套sonarqube环境。首先要明确一点，sonarqube从整体上看分成两部分，server和scanner。其中在服务器上安装的为server部分，且server需要连接数据库来存储自身的配置和检查结果等、需要安装插件来实现对不同语言、不同VCS的支持等。至于scanner，那是运行在CI、IDE或者maven等项目管理工具上的，作用就是分析项目。</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>sonarqube在其<a href="https://www.sonarqube.org/downloads/" target="_blank" rel="external">官方网站</a>上就可以完整下载到，体积看上去不小，再看看最低硬件要求，实话说也蛮高的，我猜测可能和它包含了web服务、cs计算引擎、es全文索引三大件有关吧，下载完毕后解压到/opt目录即可。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>sonarqube的配置文件位于./conf目录下，包括sonar.properties<br>和wrapper.conf两个，依次打开看看。</p>
<h5 id="sonar-properties"><a href="#sonar-properties" class="headerlink" title="sonar.properties"></a>sonar.properties</h5><p>这个文件是sonarqube的核心配置文件了，可以/需要配置的东西还是不少的。粗略浏览一下，包括这么几个部分</p>
<ul>
<li>数据库</li>
<li>Web服务器</li>
<li>SSO鉴权</li>
<li>计算引擎</li>
<li>全文搜索引擎</li>
<li>代理服务器</li>
<li>日志</li>
<li>其他杂项 &amp; 开发者选项</li>
</ul>
<p>受限于篇幅，本文参考官方教程，简单阐述一些必须的配置。首先自然是数据库老三样——URL、用户名和密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sonar.jdbc.username=sonarqube</div><div class="line">sonar.jdbc.password=password</div><div class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonarqube</div></pre></td></tr></table></figure></p>
<p>其次是HTTP服务绑定的网卡和端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sonar.web.host=0.0.0.0</div><div class="line">sonar.web.port=9000</div></pre></td></tr></table></figure></p>
<p>最后是官方建议的，对Web服务所在的jvm启用-server参数，据说可以提高性能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sonar.web.javaOpts=-server</div></pre></td></tr></table></figure></p>
<p>哦对了，数据目录和日志目录不必多说，看过我前面几篇博客都应该发现我将所有与业务的这两个目录统一放在/data下了。</p>
<p>至于其他的配置项，由于配置文件里的说明十分详细，有需要的同学可以按着说明调整相关的配置。</p>
<h5 id="wrapper-conf"><a href="#wrapper-conf" class="headerlink" title="wrapper.conf"></a>wrapper.conf</h5><p>这个文件配置的是Java Service Wrapper，它是啥大伙自行谷歌去。</p>
<p>虽然这个文件标明了，除了JVM路径以外的内容不要修改，但毕竟其中包含了wrapper的日志目录，而且默认的配置是大小不限制、文件数不限制，如果访问量大的话，不可避免地会在程序目录下打出太多的日志，所以还是把这个改一下吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wrapper.logfile=/data/logs/sonarqube/sonar.log</div><div class="line"></div><div class="line"># 下面2行默认是注释掉的，相应的特性也被禁用了，根据需要修改</div><div class="line">wrapper.logfile.maxsize=0</div><div class="line">wrapper.logfile.maxfiles=0</div></pre></td></tr></table></figure></p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>进入./bin目录，可以看到sonarqube支持的各种操作系统中所对应的不同启动程序，以我们的linux-x86_64为例，运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./sonar.sh start</div></pre></td></tr></table></figure></p>
<p>即可启动sonarqube。通过浏览器访问server的url就可以看到sonarqube的主界面了（当然第一次访问还需要进行一些初始化工作）。</p>
<p>官方的教程中还提到了<a href="https://docs.sonarqube.org/display/SONAR/Running+SonarQube+as+a+Service+on+Linux" target="_blank" rel="external">如何将sonarqube配置成系统服务</a>，</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>注意了，刚才安装和启动的那只是server部分，前面说过，server一般用来查看分析的结果并做相应的处理，我们还需要scanner来进行代码的分析。<a href="https://docs.sonarqube.org/display/SONAR/Analyzing+Source+Code" target="_blank" rel="external">官方教程</a>中明确了scanner的6种使用方式。因为我们项目是用maven管理的，又暂时没有接入jenkins，所以这里我们直接通过sonarqube的maven插件进行编码质量检查，顺便做个示范。</p>
<p>首先要在项目的pom文件中加上sonarqube的maven插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;plugin&gt;</div><div class="line">  &lt;groupId&gt;org.sonarsource.scanner.maven&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;sonar-maven-plugin&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;3.2&lt;/version&gt;</div><div class="line">&lt;/plugin&gt;</div></pre></td></tr></table></figure></p>
<p>这个插件只需要配置一个属性，那就是我们前边部署的server的url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">  &lt;sonar.host.url&gt;</div><div class="line">    http://host:port</div><div class="line">  &lt;/sonar.host.url&gt;</div><div class="line">&lt;/properties&gt;</div></pre></td></tr></table></figure></p>
<p>然后就可以进行编码质量检查了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean verify sonar:sonar</div></pre></td></tr></table></figure></p>
<p>用不了多长时间结果就会被上传，此时用浏览器打开sonarqube的server端，就可以看到代码分析的结果了，各种不规范、坏味道一目了然。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sonarqube是一个代码质量管理工具，同样是&lt;a href=&quot;https://github.com/SonarSource/sonarqube&quot;&gt;开源&lt;/a&gt;的，说白了其实它做的事也是“代码静态分析”，和安装在IDE中的findbugs、checkstyle等插件有几分类似。官方称其支持20+种语言，对java的支持更是不在话下。&lt;/p&gt;
    
    </summary>
    
      <category term="Sonarqube" scheme="http://www.lx1992.com.cn/categories/sonarqube/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Redis服务器</title>
    <link href="http://www.lx1992.com.cn/2017/01/15/install-redis-server/"/>
    <id>http://www.lx1992.com.cn/2017/01/15/install-redis-server/</id>
    <published>2017-01-15T06:04:38.000Z</published>
    <updated>2017-01-26T20:01:43.785Z</updated>
    
    <content type="html"><![CDATA[<p>Redis，一个开源、支持多种数据结构，亦支持集群和副本且高性能的内存存储。尽管它可被视为内存数据库，但更多地，我们在程序中把它当成缓存使用。缓存的内容也是多种多样，举几个简单的例子，常备访问的数据、维持会话的token，验证码等时效性较强的数据……</p>
<a id="more"></a>
<p>在搭建redis服务器，官方给出的教程是通过源码自行编译和安装。说是说make是个神器，但在ubuntu中，系统的软件源早已为我们准备好了一切，let’s go!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install redis-server</div></pre></td></tr></table></figure></p>
<p>一步搞定有木有？嗯，想要挑战一下官方教程的当然也可以，看<a href="https://github.com/antirez/redis" target="_blank" rel="external">这里</a>和<a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-redis-on-ubuntu-16-04" target="_blank" rel="external">这里</a>。我自己其实也试验过，没有想象的那么复杂，无非gcc和make报几个错，缺少依赖的头文件什么的，解决起来也挺简单。</p>
<p>前面的一键安装事实上同时安装好了server和client，在终端中运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli</div></pre></td></tr></table></figure></p>
<p>就会自动连接localhost:6379上的redis-server，试着执行几个命令(“127.0.0.1:6379&gt;”打头的行是我们的输入，顶格的行是redis的输出)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; ping</div><div class="line">PONG</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; set hello &quot;world&quot;</div><div class="line">OK</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; get hello</div><div class="line">&quot;world&quot;</div></pre></td></tr></table></figure></p>
<p>这样一来redis其实已经可用了，但还不够，至少我们要修改一下端口号、绑定的网卡、数据和日志文件路径什么的，vim打开/etc/redis/redis.conf，找到下面几行，大概位于50~200行之间，做相应的修改即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">port 6379</div><div class="line">bind 127.0.0.1</div><div class="line">logfile /var/log/redis-server.log</div><div class="line">dir /var/lib/redis</div></pre></td></tr></table></figure></p>
<p>修改完问题就来了，redis服务停止以后再也启动不了了，因为是systemd启动服务时出错，所以日志打到了/var/log/syslog里边，一开始找了有些时候，看错误日志，说的是</p>
<blockquote>
<p>Jan 14 06:08:56 pocket-erp-db redis-server[3118]: Reading the configuration file, at line 108<br>Jan 14 06:08:56 pocket-erp-db redis-server[3118]: &gt;&gt;&gt; ‘logfile /data/logs/redis/redis-server.log’<br>Jan 14 06:08:56 pocket-erp-db redis-server[3118]: Can’t open the log file: Read-only file system</p>
</blockquote>
<p>神马？？说日志所在的/data挂载点是只读的？因为/data挂载的是一块云硬盘，实习那会在公司的测试机上也碰到过类似奇怪的问题。但这回先是mount看了一眼，显示是rw的，试着往里写个文件，也没啥异常，这就奇了怪了。</p>
<p>谷歌走起，先是找到了<a href="http://stackoverflow.com/questions/19238701/redis-wont-start-after-upgrade" target="_blank" rel="external">这个</a>，他说是升级以后引入的BUG，重启一下就没事了，但我试了并不管用，后来找到了<a href="http://unix.stackexchange.com/questions/310219/process-mount-is-read-only/310360" target="_blank" rel="external">这个</a>，才是问题根本的原因。</p>
<p>原来redis认定的“Read-only file system”跟mount显示的结果并不是一回事，他有他自己的一套逻辑，这个逻辑实质上位于systemd的配置中，vim打开/etc/systemd/system/redis.service，会看到下面几行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ReadOnlyDirectories=/</div><div class="line">ReadWriteDirectories=-/var/lib/redis</div><div class="line">ReadWriteDirectories=-/var/log/redis</div><div class="line">ReadWriteDirectories=-/var/run/redis</div></pre></td></tr></table></figure></p>
<p>原来除了指定的这3个目录，其他目录对于redis来说都是只读的，难怪会报错呢，改就一个字！别忘了改完这个文件要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div></pre></td></tr></table></figure></p>
<p>重新加载下systemd。</p>
<p>等下！打住！做这几步操作之前麻烦先把服务停下来，虽然我也不确定是不是就是这个原因，我在服务运行期间做了上面的几个操作，再回过头来想重启服务时，卡在了停止服务那一步，更可怕的是，redis设置了“永不超时”……最后费尽周折好不容易重启了服务，幸好没出啥大篓子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis，一个开源、支持多种数据结构，亦支持集群和副本且高性能的内存存储。尽管它可被视为内存数据库，但更多地，我们在程序中把它当成缓存使用。缓存的内容也是多种多样，举几个简单的例子，常备访问的数据、维持会话的token，验证码等时效性较强的数据……&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://www.lx1992.com.cn/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Disconf「分布式配置管理」服务</title>
    <link href="http://www.lx1992.com.cn/2017/01/14/install-disconf-server/"/>
    <id>http://www.lx1992.com.cn/2017/01/14/install-disconf-server/</id>
    <published>2017-01-14T06:33:09.000Z</published>
    <updated>2017-01-26T19:13:49.995Z</updated>
    
    <content type="html"><![CDATA[<p>disconf是百度开源的一套分布式配置管理平台，详情可以戳<a href="https://github.com/knightliao/disconf" target="_blank" rel="external">这里</a>。</p>
<p>尽管类似的平台不在少数，国内的奇虎、阿里等也均有类似开源实现，但它对于我们后端应用中诸多配置，在使用和管理上之方便，是直到博主进入在某大型O2O公司实习时才深有体会。</p>
<a id="more"></a>
<p>试想一下，一个应用，首先肯定有多个环境，至少，线上线下连接的数据库肯定不相同，然后，不论是出于负载均衡，还是可用性方面的考虑，线上业务很可能不是单点的，也就是部署在了多台vm，或者docker中，某天因业务需要，要修改一个配置项……</p>
<p>先解决前一个问题，纵然通过spring或者maven的profile都可以规避这个问题，更简单一点，写一个脚本，在启动程序时带几个跟当前环境相关的jvm启动参数，欧了；后一个问题，更简单了，配置文件一般不都在resource目录下嘛，改之、打包、部署～可……这样真的好么？</p>
<p>本文将通过部署disconf来更高效地解决上面的问题。Come on！补充一句，disconf分为disconf-client和disconf-web两部分，client用在我们的业务系统中，web部署在我们的服务器上，本文两部分都会涉及。</p>
<p>相比于其他应用，disconf的部署主要是依赖的的东西不少，而且都是比较重的，什么mysql、redis、zookeeper，好在这一些我们的其他业务系统也要用到，有些呢，甚至早就部署过了。</p>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><h5 id="mysql和redis"><a href="#mysql和redis" class="headerlink" title="mysql和redis"></a>mysql和redis</h5><p>作为最常见的关系数据库、内存数据库（虽然一般用作缓存了），不要说你没有哈，真没有的话，戳<a href="">这里</a>和<a href="">这里</a>看我以前的博客。</p>
<h5 id="tomcat和nginx"><a href="#tomcat和nginx" class="headerlink" title="tomcat和nginx"></a>tomcat和nginx</h5><p>这两个家伙不比上头的数据库们罕见。其实一开始我还奇怪，为什么要同时使用两个web服务器，后来了解到，这是做法叫做“动静分离”，静态web资源依靠nginx，动态依靠tomcat，毕竟nginx在渲染静态资源时效率真的要高出不少。两者的安装和配置请戳<a href="">这里</a>和<a href="">这里</a>。</p>
<h5 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h5><p>最后这个嘛，对分布式、高可用等概念稍微有一点了解的同学应该都听说过，本文暂时不会对它做深入的解释，它的安装，毕竟是可以通过ubuntu的软件源来完成的，方便了不少呢<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># zk需要java环境，一般地，openjdk可以代替oracle jdk</div><div class="line">apt install openjdk-8-jdk</div><div class="line"></div><div class="line"># zookeeperd用于提供zk的启动脚本，从而以服务形式管理zk</div><div class="line">apt install zookeeper zookeeperd</div></pre></td></tr></table></figure></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>其实这个副标题不是那么恰当，这一步要完成的是下载disconf-web并且修改它的配置文件来适应前边安装好的以来组件。disconf下载有那么一丁点特殊，它没有提供单独的下载地址，既然是github上的一个项目，直接clone吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/knightliao/disconf.git</div></pre></td></tr></table></figure></p>
<p>然后打开./disconf-web/profiles/rd目录，其中有</p>
<ul>
<li>application.properties</li>
<li>jdbc-mysql.properties</li>
<li>log4j.properties</li>
<li>logback.xml</li>
<li>redis-config.properties</li>
<li>zoo.properties</li>
</ul>
<p>共6个文件就是disconf的配置文件，我们需要依次修改。</p>
<h5 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h5><p>首先这个文件是由application-demo.properties重命名而来的，这里边配置的是服务器域名和邮件通知功能。服务器域名，官方文档上说要和后边nginx里的配置保持一致。</p>
<h5 id="jdbc-mysql-properties-amp-redis-config-properties"><a href="#jdbc-mysql-properties-amp-redis-config-properties" class="headerlink" title="jdbc-mysql.properties &amp; redis-config.properties"></a>jdbc-mysql.properties &amp; redis-config.properties</h5><p>这两个文件看名字猜也猜得到，配置mysql和redis的，我们要修改的主要是如何连接到相应的数据库。另外官方文档要求redis必须配置双实例，就算我们的redis服务单点，也要配置两个。</p>
<h5 id="log4j-properties-amp-logback-xml"><a href="#log4j-properties-amp-logback-xml" class="headerlink" title="log4j.properties &amp; logback.xml"></a>log4j.properties &amp; logback.xml</h5><p>两个日志框架的配置文件，日志格式个人觉得没有什么修改的必要，但我们所有业务有统一的日志路径，所以日志路径是要修改的。因为没有细读过disconf的源代码，所以不是很清楚它是同时用了log4j和logback还是咋滴，两个文件中总共配置了3处日志，日志文件名分别是disconf-log4j.log、disconf-web.log和monitor.log。</p>
<h5 id="zoo-properties"><a href="#zoo-properties" class="headerlink" title="zoo.properties"></a>zoo.properties</h5><p>最后这个是zookeeper的配置文件，这个文件原本配置了3台机器组成的zk集群，谁让我们服务都是单点的呢(笑～)，直接改成我们唯一的zk节点的ip和端口。</p>
<p>另外这里有点小问题，此处配置的zk节点信息，client启动时会通过web api去获取和使用，如果我们配置成zk节点的内网ip，那线下可能就访问不到，而如果配置成外网ip，线上使用时所有数据岂不是要到公网上绕一圈？我暂时没有好的办法，配置成了公网ip，再在内网主机的hosts里加一行，强行将公网ip转向内网ip，哪位同学给个更好的解决方案哈～</p>
<h4 id="打包和部署"><a href="#打包和部署" class="headerlink" title="打包和部署"></a>打包和部署</h4><p>disconf提供了一个用于打包自身的脚本：.disconf-web/deploy/deploy.sh，运行脚本前要指定好配置文件的所在路径，以及打包的输出路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 指定配置文件文件所在路径</div><div class="line">ONLINE_CONFIG_PATH=/tmp/disconf/disconf-web/profile/rd</div><div class="line">export ONLINE_CONFIG_PATH</div><div class="line"></div><div class="line"># 指定打包输出路径</div><div class="line">WAR_ROOT_PATH=/tmp/disconf/disconf-web/war</div><div class="line">export WAR_ROOT_PATH</div><div class="line"></div><div class="line"># 执行打包脚本（cd到disconf-web目录下执行）</div><div class="line">sh deploy/deploy.sh</div></pre></td></tr></table></figure></p>
<p>可能要经过一段时间的等待（毕竟要下载不少jar包），打开刚才指定的目录输出路径，可以看到是一个熟悉的web项目的结构。吐槽一句，既然部署脚本已经帮忙把war包给解压了，那为何不好人做到底，把已经没用的war包顺手删掉呢？还有打包时复制过去的配置文件同样也是多余的呀。</p>
<p>在正式部署之前还有一件事要做——初始化数据库，要用到的sql，disconf也都提供好了，位于./disconf-web/sql目录下，包括4个文件，执行的顺序看其中的readme吧。当然，这都是可以修改了，像什么环境啦，用户啦都可以定制得更符合我们的需要，还有许多测试数据可能也是我们不需要的。</p>
<p>初始化好了数据库就可以开始部署了。前面说过，disconf做了动静分离，因此部署分两个部分。先部署动态部分（tomcat），修改tomcat端口为disconf的后端端口号（这里假定本机的tomcat上就跑这么一个应用～），打开配置目录下的server.xml文件，在<host>节点下添加这么一个虚拟主机，映射到站点根目录上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Context path=&quot;&quot; docBase=&quot;/opt/disconf&quot; /&gt;</div></pre></td></tr></table></figure></host></p>
<p>再部署静态部分（nginx），同样假定本机的nginx只被disconf使用，因此直接修改default站点（/etc/nginx/site-available/default文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen 80 default_server;</div><div class="line">	root /opt/disconf/html;</div><div class="line">	index index.html;</div><div class="line">	server_name _;</div><div class="line">	location / &#123;</div><div class="line">		try_files $uri $uri/ =404;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新启动tomcat和nginx就完成了disconf的部署。注意这里完全将动态资源和静态资源分离了，这是因为我们还有另一台更前置的nginx，根据具体的uri匹配请求的资源应该被反向代理到这里的tomcat还是nginx上，因此如果到这一步要进行测试的话，记得访问动静态资源的端口号是不一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;disconf是百度开源的一套分布式配置管理平台，详情可以戳&lt;a href=&quot;https://github.com/knightliao/disconf&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;尽管类似的平台不在少数，国内的奇虎、阿里等也均有类似开源实现，但它对于我们后端应用中诸多配置，在使用和管理上之方便，是直到博主进入在某大型O2O公司实习时才深有体会。&lt;/p&gt;
    
    </summary>
    
      <category term="Disconf" scheme="http://www.lx1992.com.cn/categories/disconf/"/>
    
    
  </entry>
  
  <entry>
    <title>配置ssh端口转发</title>
    <link href="http://www.lx1992.com.cn/2017/01/11/ssh-port-forwarding/"/>
    <id>http://www.lx1992.com.cn/2017/01/11/ssh-port-forwarding/</id>
    <published>2017-01-11T08:01:24.000Z</published>
    <updated>2017-01-26T19:58:09.723Z</updated>
    
    <content type="html"><![CDATA[<p>接触linux的同学不可避免地要常常接触ssh，一般地，我们都可以在本地主机（下称<strong>host1</strong>）上通过ssh命令直接连接另一台远程主机（下称<strong>host2</strong>）来执行想要的命令。</p>
<p>但在某些情况下，因为存在防火墙，或者两台主机不在同一个网络，再者其他别的什么原因，可能我们无法直接从host1登录host2。</p>
<a id="more"></a>
<p>要解决这个问题，办法也不少，比方说在防火墙上打个洞，至少把host2的主机的ssh端口暴露出来，当然，这一般不是我们所期望的解决方案；更为常见的办法，是再找一台既能够被host1访问，又能够被host2访问的主机（下称<strong>host3</strong>）用作跳板，从而间接实现host1登录host2。&lt;!–，示意图如下</p>
<p><img src="?" alt="">–&gt;</p>
<p>要实现这个效果，办法又有不止一种，之前也介绍过<a href="/2016/12/30/port-mapping-by-iptables/">用iptables实现端口映射</a>，本文则主要讲讲如何用ssh的“端口转发”（Port Forwarding）功能实现类似的效果。</p>
<p>ssh的端口转发分为3种，本地转发、远程转发和动态转发。</p>
<h4 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h4><p>用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -L [&lt;local host&gt;:]&lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;ssh host&gt;</div></pre></td></tr></table></figure></p>
<p>例如，在host1上执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -L 7001:&lt;host2&gt;:8001 &lt;host3&gt;</div></pre></td></tr></table></figure></p>
<p>即可建立host1到host3的ssh连接，并在host1上监听7001端口，将到达此端口的数据，通过host3，转发到host2的8001端口上。</p>
<p>注意一点，host1默认只在本地回环的7001端口上监听，所以从host1以外的主机是无法使用这个本地转发的，如果需要别的机器使用，有两种办法：一是带上常被忽略的[<local host="">:]参数，并且写成0.0.0.0来监听host1所有网卡；二是带上-g参数，顺带着补充几个ssh常见的参数：-f后台运行，-C压缩数据，-N不执行命令。</local></p>
<h4 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h4><p>用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -R [&lt;local host&gt;:]&lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;ssh host&gt;</div></pre></td></tr></table></figure></p>
<p>首先要想想为什么会有远程转发的存在。很多时候，我们的host3面临这样一种境地，它可以访问外网，但外网不能访问它，最常见的就是host3位于nat路由之后的情形。这种情况下本地转发就失效了，此时需要host3反过来主动建立到host1的连接，应当在host3上执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -R 7002:&lt;host2&gt;:8002 &lt;host1&gt;</div></pre></td></tr></table></figure></p>
<p>类比本地转发，这次建立的是host3到host1的ssh连接，并在host3上监听7002端口，将到达此端口的数据，转发到host2的8002端口上。</p>
<p>有点晕？其实本地转发和远程转发两者最显著的差异在于一开始host1和host3建立ssh连接的方向，谁是ssh client，谁是ssh server，其他数据流的方向是一样的。如果这个ssh连接的方向，和端口转发的方向一致，那么就是“本地转发”，否则是“远程转发”。假如host1和host3之间本身就可以互相访问，那这两种转发用哪一种都可以。</p>
<h4 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h4><p>用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -D [&lt;local host&gt;:]&lt;local port&gt; &lt;ssh host&gt;</div></pre></td></tr></table></figure></p>
<p>最后这个动态转发和前面两者不太一样，无论本地转发还是远程转发，都要指定怎么转发，但有时候这个不是我们一开始就能确定的。其实，在动态转发中，ssh扮演了SOCKS(5)代理的角色，具体实现是SOCKS协议的事了，超出了本文的范畴。如果你在host1上执行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -D 9001 &lt;host3&gt;</div></pre></td></tr></table></figure></p>
<p>那么host1上的其他应用就可以设置127.0.0.1:9001作为自己的SOCKS(5)代理服务器了。</p>
<h4 id="实现连接维持"><a href="#实现连接维持" class="headerlink" title="实现连接维持"></a>实现连接维持</h4><p>不知道各位看官发没发现一个问题，上面的所有操作，都是基于事先建立好的一个ssh连接之上的，但连接毕竟是连接啊，谁知道啥时候就断了呢？万一连接断了，岂不是又要我们人工登录上去重新配一次端口转发，这多麻烦！这时就可以请出autossh这货了。它是干啥滴？</p>
<blockquote>
<p>autossh is a program to start a copy of ssh and monitor it, restarting it as necessary should it die or stop passing traffic.</p>
</blockquote>
<p>man一下，说的很清楚，它用来启动一个ssh连接并监视它，一旦它挂了就重启它。具体的原理呢，就是在建立ssh连接的2台主机之间再建立1个用于监视的连接，而这个连接上定期有测试数据传送。</p>
<p>啊，别问我如果这个监视的连接也挂了该怎么办。。。而且理论上，如果建立ssh连接的时候附带着执行一条会定期产生数据传送的命令，应该也可以实现类似的效果吧？</p>
<p>至于使用，autossh主要就多了一个-M参数，指定2个端口号，分别用于监视数据的发送和接收，如果只指定了其一，另一个自动取给定的这个端口号+1；至于-f参数，我又在这里踩坑了，也是看了帮助文档以后才知道，虽然和ssh里的-f一样都是使命令在后台运行，但给autossh加上-f可能会导致ssh无法输入密码什么的，所以这个参数放在ssh里头好了。</p>
<p>举个栗子，autossh的用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">autossh -M 4444 -gNfL 2222:192.168.1.102:3333 user@192.168.1.103</div></pre></td></tr></table></figure></p>
<p>就可以实现“在后台建立到192.168.1.103的ssh连接，不执行命令但用于将到达本机2222端口的数据转发到192.168.1.102的3333端口，而且它是可被共享的；另外通过4444和4445端口监视这个ssh连接的存活状况，如果发生异常会自动重连”。对了，最好将autossh添加到开机启动里头哦，否则机器一重启，我们的配置又没有了。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/" target="_blank" rel="external">实战 SSH 端口转发</a><br><a href="https://blog.twofei.com/528/" target="_blank" rel="external">SSH的三种端口转发（Port forwarding）</a><br><a href="http://www.cnblogs.com/eshizhan/archive/2012/07/16/2592902.html" target="_blank" rel="external">SSH反向连接及Autossh</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触linux的同学不可避免地要常常接触ssh，一般地，我们都可以在本地主机（下称&lt;strong&gt;host1&lt;/strong&gt;）上通过ssh命令直接连接另一台远程主机（下称&lt;strong&gt;host2&lt;/strong&gt;）来执行想要的命令。&lt;/p&gt;
&lt;p&gt;但在某些情况下，因为存在防火墙，或者两台主机不在同一个网络，再者其他别的什么原因，可能我们无法直接从host1登录host2。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.lx1992.com.cn/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>用Postfix实现通过外部SMTP服务转发邮件</title>
    <link href="http://www.lx1992.com.cn/2017/01/10/send-mail-using-external-smtp-by-postfix/"/>
    <id>http://www.lx1992.com.cn/2017/01/10/send-mail-using-external-smtp-by-postfix/</id>
    <published>2017-01-10T08:49:30.000Z</published>
    <updated>2017-01-26T19:56:19.468Z</updated>
    
    <content type="html"><![CDATA[<p>项目中许多地方都需要邮件通知功能。以开发工具为例，譬如，Gogs在版本库变化时可以通知团队成员、Redmine在项目（任务）进度变化时也有类似的功能，更进一步地，程序上线后将会配置相应的JVM监控，以便于发生线上故障时（程序抛出非预期的异常等）及时通知开发者处理。</p>
<a id="more"></a>
<p>但是，有几个问题需要留意。首先是如何发送邮件？自己搭建一套完整的邮件服务？真的这样做的话，可以以类似<a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x6d;&#97;&#x69;&#108;&#x40;&#x6d;&#121;&#100;&#x6f;&#109;&#97;&#105;&#x6e;&#x2e;&#99;&#111;&#109;">&#x6d;&#97;&#x69;&#108;&#x40;&#x6d;&#121;&#100;&#x6f;&#109;&#97;&#105;&#x6e;&#x2e;&#99;&#111;&#109;</a>的名义发送邮件，看上去是逼格满满，可就算不考虑这个操作的复杂性，在这个垃圾邮件泛滥的时代，十有八九这种自己发送的邮件会面临各种限制。再者，更现实一点，这些程序都运行在内网主机上，如何向外部发送邮件呢？</p>
<p>其实，使用邮件中继转发（relay）服务就可以完全解决上面这些所谓的“问题”。邮件中继转发，简单地说，就是邮件的最终递送仍旧由外部SMTP服务完成，163、QQ、Gmail什么的都可以，他们不是更专业吗？而我们的邮件服务器只是扮演一个代理的作用而已。</p>
<p>肩负邮件中继转发这一使命的，也就是本文的主角——Postfix。想要详细学习了解的同学可以戳<a href="https://en.wikipedia.org/wiki/postfix_(software" target="_blank" rel="external">这里</a>)。在本例中，我们的程序将要发送的邮件交给Postfix，然后就没有然后了，完全不知道，也不需要知道邮件最后怎么样了。而收到邮件的Postfix，就像我们在邮件客户端（Foxmail、Thunderbird等）里点击“发送”按钮一般，将邮件交由配置好的外部SMTP服务。</p>
<p>下面直接介绍开始配置的过程。</p>
<h4 id="安装Postfix"><a href="#安装Postfix" class="headerlink" title="安装Postfix"></a>安装Postfix</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install postfix</div></pre></td></tr></table></figure>
<p>安装过程中有3次同用户的交互。</p>
<p>首先是询问你邮件服务器类型，网上大部分资料，选择的都是Internet site，但其实，纯粹用作邮件中继转发，选择Satellite system就可以了。<br><img src="/images/a1ebbc6e-02eb-4aaf-8700-024041115cdc.png" alt=""></p>
<p>然后是设置邮件域名，这里Postfix默认填入了主机名，因为不是直接通过我们的主机对外发送邮件，这一步的意义似乎没有网上教程说的那么邪乎，还要配置DNS的MX记录的。<br><img src="/images/c6502464-9389-4509-9f41-762ac25f7595.png" alt=""></p>
<p>最后是设置Postfix将收到的邮件中继转发给谁，也就是外部SMTP服务器的地址，本例中我们使用阿里云邮，按照它的说明，这里应该填入[smtp.aliyun.com]:465。<br>注意：如果第一步选择了Internet site，那么这一步就不会出现了，可以在安装完成后直接去修改配置文件。<br><img src="/images/426ecca3-a035-4a57-9c8d-661c5171ec9e.png" alt=""></p>
<h4 id="配置main-cf"><a href="#配置main-cf" class="headerlink" title="配置main.cf"></a>配置main.cf</h4><p>Postfix的主要配置文件为main.cf和master.cf，其中后者一般可以直接保持默认，配置邮件中继转发服务仅需要修改前者，vim打开这个文件，找到其中这几行（没有的话就自己加上），并且修改等号后面的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">inet_interfaces = all</div><div class="line">inet_protocols = ipv4</div><div class="line">mynetworks_style = subnet</div><div class="line">mynetworks = 127.0.0.0/8, 192.168.207.0/24</div><div class="line"></div><div class="line">smtpd_use_tls = no</div><div class="line"></div><div class="line">relayhost = [smtp.****.com]:465</div><div class="line">smtp_sasl_auth_enable = yes</div><div class="line">smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd</div><div class="line">smtp_sasl_security_options = noanonymous</div><div class="line"></div><div class="line">smtp_use_tls = no</div><div class="line">smtp_tls_wrappermode = yes</div><div class="line">smtp_tls_security_level = encrypt</div></pre></td></tr></table></figure></p>
<p>可能这个地方又和网上的教程不太一致了，但也是博主自己反复踩坑、修改文件后得出的一组能够正常工作的配置。</p>
<p>inet_interfaces：配置Postfix监听的网卡，常见的选项包括all和loopback-only，当然也可以指定具体的IP+端口号，但官方的建议是这个选项直接保持默认，因为还有许多别的途径可以满足类似的需求。</p>
<p>inet_protocols：配置Postfix使用的网络协议，毕竟在我国ipv6只用在教育网，直接把这项配置成ipv4还可以免去诸如::1这样的IP地址出现。</p>
<p>mynetworks：配置Postfix可信任的客户端，本例中采用了CIDR写法，对来源是本机，或者本机所在局域网（192.168.207.0网段）的邮件才予以中转。这个和mynetworks_style是相呼应的，一般设置这个即可。</p>
<p>smtpd_use_tls：这个的缺省值是yes，并且还配置了证书，但估计就是证书的问题，发送邮件时报了一个关于证书的错误。考虑到我们搭建的是close relay且仅在内部使用，对安全性要求没那么高，直接关掉这个选项了事。</p>
<p>relayhost：这个应该在安装的第三步已经配置过了，当时没配的，这里补上吧。</p>
<p>smtp_sasl打头的3个选项：分别用于配置外部smtp服务是否需要授权？授权信息保存在哪？有哪些授权限制？答案是当然需要授权、授权信息保存在/etc/postfix/sasl_passwd中（后面会单独配置）、不允许匿名登录。</p>
<p>smtp_use_tls：这个的缺省值也是yes，按照我所使用的外部smtp服务方的说明，应该是要启用这个选项了，但是一旦启用就提示connection time out，也不像是证书又惹祸了，知道原因的同学可以说一声呀。</p>
<p>smtp_tls打头的2个选项：这最后2个原本我是没有配置的，网上的教程似乎也没提及，但是配置成功、发送邮件时有个警告，建议我加上，那就加上吧……</p>
<h4 id="配置sasl-passwd"><a href="#配置sasl-passwd" class="headerlink" title="配置sasl_passwd"></a>配置sasl_passwd</h4><p>前面提到过，关于外部SMTP服务授权相关的信息保存在sasl_passwd中，按照官方的建议，我们创建/etc/postfix/sasl_passwd文件，并在其中填入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$relayhost username:password</div></pre></td></tr></table></figure></p>
<p>注意：这个relayhost和main.cf中的必须一致（所以我给加了个$符），毕竟要建立映射关系的。我在这里踩了两次坑，第一次是两个地方配置不一致，第二次是密码居然输错了……报错前者是“需要认证”，后者是“认证失败”，因此耽搁了一点时间。</p>
<p>然后转换成Postfix需要的hash格式（生成sasl_passwd.db文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postmap /etc/postfix/sasl_passwd</div></pre></td></tr></table></figure></p>
<p>注意：我们将邮箱密码明文保存在sasl_passwd中了，出于安全性考虑，建议将这个文件的权限设置成只有root用户可读。</p>
<h4 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h4><p>至此，Postfix的配置就完成了，重启之。嗯，其实Postfix提供了重新载入配置文件的方法，很多时候并不需要重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postfix reload</div></pre></td></tr></table></figure></p>
<p>莫忘了把我们的程序中的SMTP服务器填写成“Postfix服务器地址:25”，然后发送一封测试邮件。瞅一眼日志，发送成功！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Jan 10 16:32:02 ubuntu-server postfix/smtp[3946]: 9D6E381168: to=&lt;****@163.com&gt;, relay=smtp.****.com[*.*.*.*]:465, delay=0.5, delays=0/0/0.25/0.25, dsn=2.0.0, status=sent (250 Data Ok: queued as freedom)</div><div class="line">Jan 10 16:32:02 ubuntu-server postfix/qmgr[3942]: 9D6E381168: removed</div></pre></td></tr></table></figure></p>
<p>P.S.日志位于/var/log/mail.log中，Postfix设计的原则就是Linux已经有的，绝不重复造轮子，所以……</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-mail-relay-with-postfix-and-mailgun-on-ubuntu-16-04" target="_blank" rel="external">How to Set Up a Mail Relay with Postfix and Mailgun on Ubuntu 16.04 </a><br><a href="https://www.howtoforge.com/tutorial/configure-postfix-to-use-gmail-as-a-mail-relay/" target="_blank" rel="external">Configure Postfix to use Gmail as a Mail Relay</a><br><a href="https://easyengine.io/tutorials/linux/ubuntu-postfix-gmail-smtp/" target="_blank" rel="external">Configure Postfix to Use Gmail SMTP on Ubuntu</a><br><a href="https://www.linode.com/docs/email/postfix/postfix-smtp-debian7" target="_blank" rel="external">Configure Postfix to Send Mail Using an External SMTP Server</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中许多地方都需要邮件通知功能。以开发工具为例，譬如，Gogs在版本库变化时可以通知团队成员、Redmine在项目（任务）进度变化时也有类似的功能，更进一步地，程序上线后将会配置相应的JVM监控，以便于发生线上故障时（程序抛出非预期的异常等）及时通知开发者处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Postfix" scheme="http://www.lx1992.com.cn/categories/postfix/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Gogs「私有Git版本控制」服务</title>
    <link href="http://www.lx1992.com.cn/2017/01/06/install-gogs-server/"/>
    <id>http://www.lx1992.com.cn/2017/01/06/install-gogs-server/</id>
    <published>2017-01-06T06:03:19.000Z</published>
    <updated>2017-01-26T19:54:11.892Z</updated>
    
    <content type="html"><![CDATA[<p>Gogs(Go Git Service)是一款使用Go语言开发，极易以最简单、最快速和最轻松的方式搭建的自助Git服务。</p>
<a id="more"></a>
<p>相比于这个系列下面其他开发工具的安装和配置，gogs还算是比较简单的。另外考虑到建立linux/mysql用户、tar解压缩这一类的简单操作已经重复了太多次，本文就不再重复讲述了。</p>
<p>首先将下载好的安装包解压到/opt目录下，并在mysql中运行scripts子目录下的mysql.sql文件。这步操作实际上就是创建了一个名为gogs、编码为utf8mb4的空数据库，因此也可以自己在mysql中创建。</p>
<p>随后切换回上层目录（/opt/gogs），运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gogs web</div></pre></td></tr></table></figure></p>
<p>即可使用 <a href="http://ip:3000" target="_blank" rel="external">http://ip:3000</a> 访问gogs服务，进行进一步的安装和配置，包括gogs运行环境、数据库、管理员账户等。</p>
<p>到此为止，gogs的安装和配置基本上就完成了，但还是以普通进程方式运行的，我们还应当配置为以<a href="">服务</a>或<a href="">守护进程</a>的方式运行，保证gogs服务开机自启动且稳定运行。</p>
<p>这就完了？！我自己都觉得这次写的好水啊……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gogs(Go Git Service)是一款使用Go语言开发，极易以最简单、最快速和最轻松的方式搭建的自助Git服务。&lt;/p&gt;
    
    </summary>
    
      <category term="Gogs" scheme="http://www.lx1992.com.cn/categories/gogs/"/>
    
    
  </entry>
  
  <entry>
    <title>重置MySQL服务器</title>
    <link href="http://www.lx1992.com.cn/2017/01/03/reset-mysql-server/"/>
    <id>http://www.lx1992.com.cn/2017/01/03/reset-mysql-server/</id>
    <published>2017-01-03T13:36:15.000Z</published>
    <updated>2017-01-26T19:46:44.287Z</updated>
    
    <content type="html"><![CDATA[<p>也不知道是造了什么虐，昨天搭建好的MySQL服务器今天竟然挂了。。。无奈又写了这篇。这篇文章主要包括两个部分，一是如何重置root密码，二是如何直接重建整个数据库。除非遇到一些比较极端的情况，否则所述的内容可能不会很常用。</p>
<a id="more"></a>
<h4 id="1-重置root密码"><a href="#1-重置root密码" class="headerlink" title="1. 重置root密码"></a>1. 重置root密码</h4><p>重置密码的步骤从网络上的资料看五花八门，所以还是参考<a href="http://dev.mysql.com/doc/refman/5.7/en/resetting-permissions.html" target="_blank" rel="external">官方指南</a>更靠谱。</p>
<p>这个教程给出了3种方案，说是分别对应Windows系统、(类)Unix系统，和通用方案。我采用了其中的“通用方案”，总共分为6个步骤。</p>
<h5 id="1-1-停止mysql服务"><a href="#1-1-停止mysql服务" class="headerlink" title="1.1 停止mysql服务"></a>1.1 停止mysql服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql stop</div></pre></td></tr></table></figure>
<h5 id="1-2-加上参数–skip-grant-tables重启mysql服务"><a href="#1-2-加上参数–skip-grant-tables重启mysql服务" class="headerlink" title="1.2 加上参数–skip-grant-tables重启mysql服务"></a>1.2 加上参数–skip-grant-tables重启mysql服务</h5><p>这个是需要以安全模式直接启动mysqld守护，因此和大多数情况下用service操作不太一样。如果不愿意这么做，也可以把这个参数直接加进配置文件里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"># 加上这么一行，其他配置保持不变</div><div class="line">skip-grant-tables</div></pre></td></tr></table></figure></p>
<p>教程中还建议一并加上–skip-networking参数。因为在skip-grant-tables模式下，mysql不需要输入密码就可以登录，这是相对不安全的，skip-networking可以阻止通过网络访问mysql。</p>
<h5 id="1-3-直接登录mysql"><a href="#1-3-直接登录mysql" class="headerlink" title="1.3 直接登录mysql"></a>1.3 直接登录mysql</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -uroot</div></pre></td></tr></table></figure>
<h5 id="1-4-重置密码"><a href="#1-4-重置密码" class="headerlink" title="1.4 重置密码"></a>1.4 重置密码</h5><p>因为skip-grant-tables的原因，alter user、set password等操作都会被拒绝，教程里仍然提到了这个办法，可能是兼容性的考虑吧。</p>
<p>此时要修改密码，可以直接修改user表，注意保存密码的字段已经不是老教程里说的password了，而是authentication_string。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 切换数据库</div><div class="line">use mysql;</div><div class="line"></div><div class="line"># 更新密码字段</div><div class="line">update user set authentication_string = password(&apos;&lt;new_password&gt;&apos;) where user = &apos;root;</div><div class="line"></div><div class="line"># 刷新权限</div><div class="line">flush privileges;</div></pre></td></tr></table></figure></p>
<h5 id="1-5-恢复配置并重启服务"><a href="#1-5-恢复配置并重启服务" class="headerlink" title="1.5 恢复配置并重启服务"></a>1.5 恢复配置并重启服务</h5><p>就是删除或者注释掉刚加在配置文件里的skip-grant-tables，然后按照正常的方式重新启动mysql服务。</p>
<h5 id="1-6-用新密码登录mysql"><a href="#1-6-用新密码登录mysql" class="headerlink" title="1.6 用新密码登录mysql"></a>1.6 用新密码登录mysql</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -p</div></pre></td></tr></table></figure>
<p>登录成功，但是执行任何操作都提示需要“重置密码”，不过这次就可以使用正常的方式修改密码了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 适合5.7.6及以后版本</div><div class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;&lt;new_password&gt;&apos;</div><div class="line"></div><div class="line"># 适合5.7.5及以前版本</div><div class="line">set password for &apos;root&apos;@&apos;localhost&apos; = password(&apos;&lt;new_password&gt;&apos;);</div></pre></td></tr></table></figure></p>
<h4 id="2-重建整个数据库"><a href="#2-重建整个数据库" class="headerlink" title="2. 重建整个数据库"></a>2. 重建整个数据库</h4><p>需要重建整个数据库的概率应当比重置root密码更低，一般是数据库发生了比较严重的故障或者损坏，且数据都不太重要或者做好了备份的情况下，直接清除掉现有的全部内容，恢复mysql服务到最原始的状态。总共分为4个步骤。</p>
<h5 id="2-1-停止mysql服务"><a href="#2-1-停止mysql服务" class="headerlink" title="2.1 停止mysql服务"></a>2.1 停止mysql服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql stop</div></pre></td></tr></table></figure>
<h5 id="2-2-删除数据目录（data-dir）下的全部文件"><a href="#2-2-删除数据目录（data-dir）下的全部文件" class="headerlink" title="2.2 删除数据目录（data_dir）下的全部文件"></a>2.2 删除数据目录（data_dir）下的全部文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 视data_dir而定</div><div class="line">cd /var/lib/mysql</div><div class="line">rm -rf *</div></pre></td></tr></table></figure>
<p>如果没有做这一步，下一步会提示“数据目录中存在文件，操作失败”</p>
<h5 id="2-3-重建数据库"><a href="#2-3-重建数据库" class="headerlink" title="2.3 重建数据库"></a>2.3 重建数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld --initialize</div></pre></td></tr></table></figure>
<h5 id="2-4-重启服务"><a href="#2-4-重启服务" class="headerlink" title="2.4 重启服务"></a>2.4 重启服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql start</div></pre></td></tr></table></figure>
<p>注意因为数据库已经被重置了，我也不知道新的root密码是什么了，试了下不是空密码，所以还得乖乖参考上一步，重置下密码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也不知道是造了什么虐，昨天搭建好的MySQL服务器今天竟然挂了。。。无奈又写了这篇。这篇文章主要包括两个部分，一是如何重置root密码，二是如何直接重建整个数据库。除非遇到一些比较极端的情况，否则所述的内容可能不会很常用。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.lx1992.com.cn/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>配置ssh免密码登录</title>
    <link href="http://www.lx1992.com.cn/2017/01/02/ssh-public-key-login/"/>
    <id>http://www.lx1992.com.cn/2017/01/02/ssh-public-key-login/</id>
    <published>2017-01-02T11:59:47.000Z</published>
    <updated>2017-01-26T19:52:33.904Z</updated>
    
    <content type="html"><![CDATA[<p>绝大多数情况下，我们都是通过ssh登录到云主机的，这个命令就是最最常规的ssh方式登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh username@hostname</div></pre></td></tr></table></figure></p>
<p>但一般地，线上主机多多少少会有一些额外的登录限制（当然，还是出于安全性的考虑）。常见的限制包括，限制从某些主机登录，限制用ssh密钥而不允许用密码登录等，这篇博客说说如何来配置后一种限制。</p>
<a id="more"></a>
<h4 id="1-配置ssh免密码登录"><a href="#1-配置ssh免密码登录" class="headerlink" title="1. 配置ssh免密码登录"></a>1. 配置ssh免密码登录</h4><p>这一步除了安全性因素外，其实懒也占了挺大一块的，ssh登录在后期是要大量使用的，每次输入密码真的太麻烦，所以在这里配置下ssh免密码登录。</p>
<p>它的原理也很简单，假设要从A机器登录B机器，默认地会要求输入B机器的密码，但如果B机器上有A机器的公钥，就可以跳过这个步骤。所以我们要做的，就是在A机器上生成密钥对，并将其中的公钥提供给B机器。</p>
<h5 id="1-1-在A机器上生成ssh密钥对"><a href="#1-1-在A机器上生成ssh密钥对" class="headerlink" title="1.1 在A机器上生成ssh密钥对"></a>1.1 在A机器上生成ssh密钥对</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
<p>运行后一路回车，即可在~/.ssh目录下生成id_rsa和id_rsa.pub两个文件，其中带.pub后缀的就是公钥，另一个是私钥，千万不能泄露哦！</p>
<h5 id="1-2-将公钥传输到B机器"><a href="#1-2-将公钥传输到B机器" class="headerlink" title="1.2 将公钥传输到B机器"></a>1.2 将公钥传输到B机器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ~/.ssh/id_rsa.pub username@hostname:~/</div></pre></td></tr></table></figure>
<p>其中的username是B机器的用户名，hostname是B机器的主机名或IP地址，这时还是要输入密码的。</p>
<h5 id="1-3-使B机器信任A机器的公钥"><a href="#1-3-使B机器信任A机器的公钥" class="headerlink" title="1.3 使B机器信任A机器的公钥"></a>1.3 使B机器信任A机器的公钥</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>这里补上后来学到的另一种方案，可以用ssh-copy-id代替scp手动复制文件、cat重定向公钥（即1.2、1.3步）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id username@hostname</div></pre></td></tr></table></figure></p>
<h5 id="1-4-配置权限"><a href="#1-4-配置权限" class="headerlink" title="1.4 配置权限"></a>1.4 配置权限</h5><p>这一步网上的说法也是必须的，虽然一开始我没有配置这一步也没有出错，但是仔细想想出于安全性的考虑还是做一下为妙。所要完成的任务就是把B机器的.ssh目录权限设置成700（仅用户本人可以读、写、访问）， authorized_keys文件权限设置成600（仅用户本人可以读、写）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 700 .ssh</div><div class="line">chmod 600 .ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>行了！试一下，在A机器上直接ssh username@hostname不再需要输入密码就直接登录了。</p>
<h4 id="2-关闭密码登录"><a href="#2-关闭密码登录" class="headerlink" title="2. 关闭密码登录"></a>2. 关闭密码登录</h4><p>上一步实现了ssh密钥登录，即快捷又方便，那么自然就可以关闭密码登录了。vim打开/etc/ssh/sshd_config文件，找到并修改下面2行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PubkeyAuthentication yes</div><div class="line">PasswordAuthentication no</div></pre></td></tr></table></figure></p>
<p>然后重启一下sshd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service sshd restart</div></pre></td></tr></table></figure></p>
<p>搞定！现在再想使用密码登录会告诉你，不行！安全性进一步提高了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;绝大多数情况下，我们都是通过ssh登录到云主机的，这个命令就是最最常规的ssh方式登录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ssh username@hostname&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但一般地，线上主机多多少少会有一些额外的登录限制（当然，还是出于安全性的考虑）。常见的限制包括，限制从某些主机登录，限制用ssh密钥而不允许用密码登录等，这篇博客说说如何来配置后一种限制。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.lx1992.com.cn/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu简单用户管理</title>
    <link href="http://www.lx1992.com.cn/2017/01/02/user-config-in-ubuntu/"/>
    <id>http://www.lx1992.com.cn/2017/01/02/user-config-in-ubuntu/</id>
    <published>2017-01-02T11:41:20.000Z</published>
    <updated>2017-01-26T19:50:28.816Z</updated>
    
    <content type="html"><![CDATA[<p>系统环境现在已经有了。也是出于成本的考虑吧，目前我们的项目会在一台主机上搭建多个服务，以部署开发工具的那台云主机为例，就包括git、maven、sonarqube等。</p>
<p>而linux本身作为一个多用户、多任务的系统，从减少耦合的角度看吧，也应该为每一个应用创建一个用户（话说没有人会希望一个简简单单的操作用的都是root用户吧）。</p>
<a id="more"></a>
<h4 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h4><p>在ubuntu系统中创建用户需要这么几个步骤。这里假设我们都能分清用户、用户组等概念了。首先是添加用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo groupadd &lt;groupname&gt;</div></pre></td></tr></table></figure></p>
<p>这样就添加了一个名为groupname的用户组。而后是添加用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo useradd &lt;username&gt; -g &lt;groupname&gt; -m</div></pre></td></tr></table></figure></p>
<p>这样就添加了一个名为username的用户，参数-g表示把新增加的用户添加到groupname用户组，-m表示为新增加的用户创建家目录。</p>
<p>最后当然要设置一个密码，输入下面这个命令，回车后输入2次username用户的新密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd &lt;username&gt;</div></pre></td></tr></table></figure></p>
<p>上面这种是比较常规的方法，ubuntu系统中还有一个命令可以一次性完成这3个步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adduser &lt;username&gt;</div></pre></td></tr></table></figure></p>
<p>不就是把useradd的2个单词反一下嘛～接下来具体的操作这个命令的提示得很完善了。</p>
<h4 id="2-赋予新用户sudo权利"><a href="#2-赋予新用户sudo权利" class="headerlink" title="2. 赋予新用户sudo权利"></a>2. 赋予新用户sudo权利</h4><p>用户也已经添加好了，不过当我们切换到username，准备sudo各种命令时会看到提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username is not in the sudoers file.  This incident will be reported.</div></pre></td></tr></table></figure></p>
<p>网上对此问题的解决方案也是挺多的，什么直接编辑/etc/sudoers，什么visudo，个人觉得更简单的办法是将username一并添加到sudo用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gpasswd -a &lt;usrname&gt; sudo</div></pre></td></tr></table></figure></p>
<p>因为/etc/sudoers中有这么一段话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Allow members of group sudo to execute any command</div><div class="line">%sudo	ALL=(ALL:ALL) ALL</div></pre></td></tr></table></figure></p>
<p>当然用传统的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -aG &lt;groupname&gt; &lt;username&gt;</div></pre></td></tr></table></figure></p>
<p>也是阔以的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统环境现在已经有了。也是出于成本的考虑吧，目前我们的项目会在一台主机上搭建多个服务，以部署开发工具的那台云主机为例，就包括git、maven、sonarqube等。&lt;/p&gt;
&lt;p&gt;而linux本身作为一个多用户、多任务的系统，从减少耦合的角度看吧，也应该为每一个应用创建一个用户（话说没有人会希望一个简简单单的操作用的都是root用户吧）。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.lx1992.com.cn/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>上美团云Ubuntu主机咯</title>
    <link href="http://www.lx1992.com.cn/2017/01/02/install-ubuntu-on-mos/"/>
    <id>http://www.lx1992.com.cn/2017/01/02/install-ubuntu-on-mos/</id>
    <published>2017-01-02T11:15:01.000Z</published>
    <updated>2017-01-26T19:26:49.774Z</updated>
    
    <content type="html"><![CDATA[<p>其实我一直挺纠结这标题的，要不要这么高调嘛……况且原本的标题是《美团云Ubuntu主机折腾记》，可仔细想，我折腾啥子了？！明明就是几个配置好不啦。</p>
<p>言归正传，项目中会用到数台云主机，今天终于鼓起勇气下了单。当然出于复杂性的考虑，这些云主机的操作系统没有采用线上更常见的CentOS，转向更为寻常的Ubuntu，当然是没有GUI的Server版。</p>
<a id="more"></a>
<p>云主机创建好以后，观察了一下，美团云这系统模板做的还是不错的，基本上可以立即使用，有一些小的点稍稍处理下也不会耽误太多的时间。</p>
<p>首先是语言环境，系统默认的是en_US.UTF-8，似乎改成中文也没有什么不妥的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg-reconfigure locales</div></pre></td></tr></table></figure></p>
<p>运行后会出现一个向导，第一步是选择需要支持的语言环境，默认只选中了en_US.UTF-8，要把zh_CN.UTF-8也一并勾上；第二步是选择默认的语言环境，同样选择zh_CN.UTF-8。OK，等待配置完成。</p>
<p>默认的语言环境配置成中文后，直接从tty登录会看到大量口口口，其实就是中文乱码了，解决的办法也不是没有，把这段脚本加到bash_profile里即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ $TERM == &quot;linux&quot; ] &amp;&amp; [ !-e $SSH_TTY ]; then</div><div class="line">    export LANG=&quot;en_US.UTF-8″</div><div class="line">    export LANGUAGE=&quot;en_US.UTF-8″</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>不过绝大多数情况下我们都是用ssh登录，这一步其实可做可不做了。网上的另一种说法是通过安装zhcon临时解决，这是一个类似ucdos的插件，从理论上说，对性能会在一定程度的影响。</p>
<p>然后还需要配置下时区，这个系统模板默认的时区是美国时间，和北京时间差了13小时，每次看时间都要做下转换也是不爽<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg-reconfigure tzdata</div></pre></td></tr></table></figure></p>
<p>在这个向导中选择亚洲（Asia）–&gt;上海（Shanghai），OK，这下时间对上了。</p>
<p>最后一步，更新下系统吧，把Linux包管理的特性利用起来，再说线上主机，基本的安全性还是要保证的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt update</div><div class="line">apt upgrade</div></pre></td></tr></table></figure></p>
<p>相信这两个命令没有同学说不知道了吧[微笑]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实我一直挺纠结这标题的，要不要这么高调嘛……况且原本的标题是《美团云Ubuntu主机折腾记》，可仔细想，我折腾啥子了？！明明就是几个配置好不啦。&lt;/p&gt;
&lt;p&gt;言归正传，项目中会用到数台云主机，今天终于鼓起勇气下了单。当然出于复杂性的考虑，这些云主机的操作系统没有采用线上更常见的CentOS，转向更为寻常的Ubuntu，当然是没有GUI的Server版。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.lx1992.com.cn/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu设置全局代理</title>
    <link href="http://www.lx1992.com.cn/2017/01/01/set-global-proxy-in-ubuntu/"/>
    <id>http://www.lx1992.com.cn/2017/01/01/set-global-proxy-in-ubuntu/</id>
    <published>2017-01-01T09:23:13.000Z</published>
    <updated>2017-01-26T19:49:31.106Z</updated>
    
    <content type="html"><![CDATA[<p>之前有一篇文章用iptables做端口映射，实现了从外网直接ssh连接一台内网云主机，但即便这样，还是存在一些问题，譬如，apt仍旧无法访问外部源。</p>
<p>至于原因哈，猜一个，因为前面配置端口转发的时候只映射了22端口，而更新软件源等，使用的是http的80端口，些许应该再配置下http的80端口、https的433端口……</p>
<p>一不做二不休，直接在外网主机上用squid架设代理服务器，不就免去这一切乱七八糟的事了吗？架设代理服务器的过程后面会补上（又给自己挖坑呢）<!--可以看[我的另一篇博客]()，当然是参考了[这篇文章]()-->。</p>
<a id="more"></a>
<p>配置好代理服务器后，自然要把内网主机的代理配置指向这台外网主机。谷歌了一下，大部分文章提到的3种办法。一是直接执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export http_proxy=“proxy_username:password@ip:port”</div></pre></td></tr></table></figure></p>
<p>（这只针对当前会话有效）；二是把上述内容添加到~/.bashrc中（实现当前用户每次登录时生效）；三是安装一些第三方工具，类似于proxychain之类的。</p>
<p>但做了配置之后（不过我只试验了前2种），的确可以使用curl、wget等访问http资源了，但apt还是无法访问外部源，而且配置生效的范围相对局限。这又如何解决呢？</p>
<p>突然想到安装了gui的ubuntu，可以在系统设置中配置全局代理，遂找了个有gui的虚机试验了一把，果然发现配置生效后有两个文件发生了变化，打开具体看一眼，内容是这样滴<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># /etc/environment</div><div class="line"></div><div class="line">http_proxy=&quot;http://192.168.128.129:3128/&quot;</div><div class="line">https_proxy=&quot;https://192.168.128.129:3128/&quot;</div><div class="line">ftp_proxy=&quot;ftp://192.168.128.129:3128/&quot;</div><div class="line">socks_proxy=&quot;socks://192.168.128.129:3128/&quot;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># /etc/apt/apt.conf</div><div class="line"></div><div class="line">Acquire::http::proxy &quot;http://192.168.128.129:3128/&quot;;</div><div class="line">Acquire::https::proxy &quot;https://192.168.128.129:3128/&quot;;</div><div class="line">Acquire::ftp::proxy &quot;ftp://192.168.128.129:3128/&quot;;</div><div class="line">Acquire::socks::proxy &quot;socks://192.168.128.129:3128/&quot;;</div></pre></td></tr></table></figure>
<p>这么看来，前者配置的是系统全局代理服务器，后者则是针对apt做了单独的配置，<a href="http://wiki.ubuntu.org.cn/UbuntuHelp:AptGet/Howto/zh#.E4.B8.BAapt-get.E8.AE.BE.E7.BD.AEhttp.E4.BB.A3.E7.90.86" target="_blank" rel="external">这篇文章</a>也应征了这个说法（ubuntu 10.10以后apt代理从后一个文件中读取）。</p>
<p>好了，将这两个文件新增的内容拷贝出来，贴到需要配置全局代理的内网主机的相同文件中去吧！</p>
<h5 id="2017-01-14补充"><a href="#2017-01-14补充" class="headerlink" title="2017-01-14补充"></a>2017-01-14补充</h5><p>除了apt，发现mvn也不走系统全局代理（捂脸）……</p>
<p>maven的代理配置位于setting.xml文件中的<proxy>节，看着修改下host和port就可以了，说起来也蛮简单的。</proxy></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有一篇文章用iptables做端口映射，实现了从外网直接ssh连接一台内网云主机，但即便这样，还是存在一些问题，譬如，apt仍旧无法访问外部源。&lt;/p&gt;
&lt;p&gt;至于原因哈，猜一个，因为前面配置端口转发的时候只映射了22端口，而更新软件源等，使用的是http的80端口，些许应该再配置下http的80端口、https的433端口……&lt;/p&gt;
&lt;p&gt;一不做二不休，直接在外网主机上用squid架设代理服务器，不就免去这一切乱七八糟的事了吗？架设代理服务器的过程后面会补上（又给自己挖坑呢）&lt;!--可以看[我的另一篇博客]()，当然是参考了[这篇文章]()--&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.lx1992.com.cn/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建MySQL服务器</title>
    <link href="http://www.lx1992.com.cn/2017/01/01/install-mysql-server/"/>
    <id>http://www.lx1992.com.cn/2017/01/01/install-mysql-server/</id>
    <published>2017-01-01T09:15:58.000Z</published>
    <updated>2017-01-26T20:01:43.777Z</updated>
    
    <content type="html"><![CDATA[<p>不论是即将开发的程序，还是开发过程中必不可少的git、wiki等工具，它们都需要用数据库来保存自身的数据，所以搭建服务器的第一步自然是先把mysql搭起来。</p>
<a id="more"></a>
<h4 id="1-安装mysql-server"><a href="#1-安装mysql-server" class="headerlink" title="1. 安装mysql-server"></a>1. 安装mysql-server</h4><p>第一步当然是要安装好mysql-server。虽然通过apt默认源亦可完成安装，但是看<a href="http://dev.mysql.com/downloads/repo/apt/" target="_blank" rel="external">mysql官方说明</a>推荐用他们的源，就照着办吧！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 切到/tmp目录，下载官方apt源的配置文件并安装</div><div class="line">cd /tmp</div><div class="line">wget http://dev.mysql.com/get/mysql-apt-config_0.8.1-1_all.deb</div><div class="line">dpkg -i mysql-apt-config_0.8.1-1_all.deb</div><div class="line"></div><div class="line"># 更新软件源，安装mysql-server</div><div class="line">apt update</div><div class="line">apt install mysql-server</div></pre></td></tr></table></figure>
<p>配置源的时候会问你想安装哪些组件、什么版本，作为服务器，只需要安装mysql-server，而出于稳定性考虑，选择5.7的稳定版本；安装的过程中，会要求输入数据库root用户的密码，总共就这2步操作～</p>
<h4 id="2-修改数据库端口和路径"><a href="#2-修改数据库端口和路径" class="headerlink" title="2. 修改数据库端口和路径"></a>2. 修改数据库端口和路径</h4><p>刚刚安装好的mysql-server有一些配置可能不完全适用于我们的环境，因此需要修改一下，主要是数据库端口和路径。修改配置之前需要先停止mysql服务，顺带着复习下服务的简单操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 启动mysql服务</div><div class="line">service mysql start</div><div class="line"></div><div class="line"># 停止mysql服务</div><div class="line">service mysql stop</div><div class="line"></div><div class="line"># 查看mysql服务当前状态</div><div class="line">service mysql status</div></pre></td></tr></table></figure></p>
<h5 id="2-1-配置文件在哪"><a href="#2-1-配置文件在哪" class="headerlink" title="2.1 配置文件在哪"></a>2.1 配置文件在哪</h5><p>网上说，mysql默认从这4个地方寻找配置文件，以先找到的为准，而ubuntu系统中，配置文件默认是下面的第2个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/etc/my.cnf</div><div class="line">/etc/mysql/my.cnf</div><div class="line">/usr/etc/my.cnf</div><div class="line">~/.my.cnf</div></pre></td></tr></table></figure></p>
<p>但是有点奇怪，打开这第2个文件，里面只有一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!includedir /etc/mysql/conf.d/</div></pre></td></tr></table></figure></p>
<p>字面上的意思应该是加载/etc/mysql/conf.d/下的文件，再打开这个目录，只有一个配置组是[mysql]的空的配置文件。</p>
<p>进一步看了下，真正的配置文件应该是/etc/mysql/mysql.cnf，因为它进一步加载了/etc/mysql/mysql.conf.d/mysqld.cnf文件，而我们要修改的[mysqld]配置组正位于其中。这个问题还待熟悉mysql配置的同学解释下哈。</p>
<h5 id="2-2-修改数据库端口"><a href="#2-2-修改数据库端口" class="headerlink" title="2.2 修改数据库端口"></a>2.2 修改数据库端口</h5><p>mysql默认监听3306端口，这是大多数人都知道的。但是呢，出于安全考虑，线上服务基本上不会保持默认端口，甚至都不会开启这附近的端口区间。要修改这个默认监听的端口，只需要修改（添加）port配置项等号后面的数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">port            = 10086</div><div class="line">bind-address	= 0.0.0.0</div></pre></td></tr></table></figure></p>
<p>顺带着地，把bind-address配置项也修改一下，它的默认值是localhost，也就意味着只能从本机连接到mysql服务，这不符合我们的需求，将它改成上面的0.0.0.0即放开这个限制。</p>
<h5 id="2-3-修改数据库路径"><a href="#2-3-修改数据库路径" class="headerlink" title="2.3 修改数据库路径"></a>2.3 修改数据库路径</h5><p>mysql默认将数据库及自身的许多重要文件放置在/var/lib/mysql这个目录下，对大多数云主机来说，这个目录就位于系统盘中，这样即不方便也不安全，再者我们的云主机都购买了数据盘呢，显然应该将这个目录移出来。</p>
<p>如果不放心到底是不是这个目录，可以登录mysql命令行，运行一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show variables like &apos;%dir%&apos;;</div></pre></td></tr></table></figure></p>
<p>其中data_dir变量的值就是当前数据库的路径。</p>
<p>接着即可修改配置文件中的data_dir配置项了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">datadir		= /data/mysql</div><div class="line">log-error	  = /data/logs/mysql/error.log</div></pre></td></tr></table></figure></p>
<p>顺带着的，可以将log的路径也修改一下。修改完路径别忘了把已有的文件复制过去，复制的时候千万留意权限的变化。</p>
<h4 id="3-踩坑时间"><a href="#3-踩坑时间" class="headerlink" title="3. 踩坑时间"></a>3. 踩坑时间</h4><p>敲！黑！板！以为这样就万事大吉，可以重启服务了？嗯，重启是没报错，可是配置也没有生效啊……</p>
<h5 id="3-1-那啥AppArmor"><a href="#3-1-那啥AppArmor" class="headerlink" title="3.1 那啥AppArmor"></a>3.1 那啥AppArmor</h5><p>实话说，我也不知道这是啥，资料显示是ubuntu的一种沙箱机制吧，反正2.3节修改数据库路径的时候，少了这一步可不行（惯性思维了，以前Windows上没这一步），而且就是它导致了没报错、配置却不生效。</p>
<p>一开始我看了<a href="http://blog.csdn.net/qinxiandiqi/article/details/43270147" target="_blank" rel="external">这篇文章</a>，相应地修改了/etc/apparmor.d/usr.sbin.mysqld和/etc/apparmor.d/abstractions/mysql两个文件。</p>
<p>结果好了，启动报错还没有任何日志输出，谷歌一下大部分结果出错的还都是mysqld.service而不是我遇到的mysql.service<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Job for mysql.service failed. See &apos;systemctl status mysqld.service&apos; and &apos;journalctl -xn&apos; for details.</div></pre></td></tr></table></figure></p>
<p>幸运的是后来又找到了<a href="https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04" target="_blank" rel="external">另一篇文章</a>。这篇文章提到了另一种思路，为数据库路径起个别名，而不是直接改掉路径。</p>
<p>需要修改的文件变成了/etc/apparmor.d/tunables/alias，打开这个文件，赫然发现这么一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Or if mysql databases are stored in /home:</div><div class="line">alias /var/lib/mysql/ -&gt; /data/mysql/,</div></pre></td></tr></table></figure></p>
<p>真的是柳暗花明啊，改之，然后别忘了先重启apparmor服务，后重启mysql服务/。瞄一眼新的数据库路径，文件的修改时间变了，日志也写进来了，Oh yeah~</p>
<h5 id="3-2-登录不了了"><a href="#3-2-登录不了了" class="headerlink" title="3.2 登录不了了"></a>3.2 登录不了了</h5><p>改完了总得测试下吧？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -p</div></pre></td></tr></table></figure></p>
<p>曾经的mysql&gt;提示符没看到，看到的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR 1698 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos;.</div></pre></td></tr></table></figure></p>
<p>密码肯定没错，如果本地都不能以root登录，那未必……，更奇怪的是，加上sudo就可以登录，看来是权限又给我桶啥篓子了（所以我说前面复制文件的时候注意权限），可检查了一番似乎又没啥问题</p>
<p>继续谷歌吧，<a href="http://askubuntu.com/questions/766334/cant-login-as-mysql-user-root-from-normal-user-account-in-ubuntu-16-04" target="_blank" rel="external">解决方案</a>这回倒不难找，可人家多是安装了mariadb导致的，我并没有哇！</p>
<p>反正最终的解决方案就是重新建了个root用户，刚好我这边会有多个应用共用一个数据库，为了控制好权限，每个应用有自己的数据库用户名和密码，就当是复习下mysql用户操作了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 删除用户root</div><div class="line">drop user &apos;root&apos;@&apos;localhost&apos;;</div><div class="line"></div><div class="line"># 创建用户root 只允许从localhost登录 密码123456</div><div class="line">create user &apos;root&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</div><div class="line"></div><div class="line"># 修改root用户密码(直接重置密码后会要求执行以下命令)</div><div class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</div><div class="line"></div><div class="line"># 赋予用户root全部权限 允许转授权</div><div class="line">grant all privileges on *.* to &apos;root&apos;@&apos;localhost&apos; with grant option;</div><div class="line"></div><div class="line"># 权限立即生效</div><div class="line">flush privileges;</div></pre></td></tr></table></figure></p>
<p>内容就是这些了，如果有同学能帮我解释踩下的几个坑，欢迎留言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不论是即将开发的程序，还是开发过程中必不可少的git、wiki等工具，它们都需要用数据库来保存自身的数据，所以搭建服务器的第一步自然是先把mysql搭起来。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.lx1992.com.cn/categories/mysql/"/>
    
    
  </entry>
  
</feed>
